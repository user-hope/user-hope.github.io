import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as u,a as n,b as s,d as t,w as l,e as a}from"./app-9b0cd270.js";const d="/images/odoo/S21/debug.png",r={},k=a(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Odoo 的 <code>Javascript</code> 框架是由 js 插件提供的一组功能模块, 用户帮助构建在浏览器中运行的 <code>odoo</code> 应用程序, 同时也是一个单页面应用程序, 通常成为 <code>web</code> 客户端(可以通过浏览器的 url 访问);</p><p><code>web</code> 客户端最初是一个使用自定义类和小部件系统制作的应用程序, 但是现在正在过渡到 <code>class</code> 类和 <code>owl</code> 作为组件的系统, 这也是为什么现在的源代码中同时存在 <code>owl</code> 的组件扩展和 原 <code>cmd</code> 模式的模块化扩展;</p><blockquote><p>在 odoo 生态系统中, 前端和后端这两个词分别视为 odoo 网站 和 web 客户端的同义词, 这一点很常见, 不要将此术语与常规的浏览器代码(前端) 和服务器代码(后端) 混淆;</p></blockquote><p>在后面的文档中, <code>component</code> 始终指的是新的 owl 组件, 而 <code>widget</code> 则指的是旧的 odoo 的小部件; 如果可以, 建议所有的客户端开发都使用 <code>owl</code> 来完成;</p><h2 id="代码结构" tabindex="-1"><a class="header-anchor" href="#代码结构" aria-hidden="true">#</a> 代码结构</h2><p><code>addons/web/static/src</code> 文件夹包含所有的 <code>web/javascript</code> 以及 css 和模板; 以下是最重要的文件夹的列表:</p><ul><li><strong><code>core/</code></strong>: 核心功能, 大多数的组件都是基于 core;</li><li><strong><code>fields/</code></strong>: 所有的字段类型的 component 组件;</li><li><strong><code>views/</code></strong>: odoo 中所有的视图 component 组件;</li><li><strong><code>search/</code></strong>: <code>control panel</code>, <code>search bar</code>, <code>search panel</code>...</li><li><strong><code>webclient/</code></strong>: web 客户端特定的代码: 导航栏、用户菜单、操作服务...</li></ul><p><code>web/static/src</code> 是根文件夹, 里面的所有内容都可以通过使用 <code>@web</code> 前缀简单地导入; 例如, 以下是如何导入位于 <code>web/static/src/core/utils/functions</code> 中的 <code>memoize</code> 函数:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> memoize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@web/core/utils/functions&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="web-客户端架构" tabindex="-1"><a class="header-anchor" href="#web-客户端架构" aria-hidden="true">#</a> Web 客户端架构</h2><p>如上所述, Web 客户端是一个 owl 应用程序. 这是其模板的稍微简化的版本:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>t</span> <span class="token attr-name">t-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>web.WebClient<span class="token punctuation">&quot;</span></span> <span class="token attr-name">owl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>o_web_client<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavBar</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ActionContainer</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MainComponentsContainer</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>t</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上, 它基本上是导航栏、当前操作和一些附加组件的容器, <code>ActionContainer</code> 是一个高阶组件, 它将显示当前操作控制器(客户端操作, 或者在类型为 <code>act_window</code> 的操作的情况下的特定视图), 管理 <code>actions</code> 是其工作的重要组成部分; <code>action service</code> 在内存中保存所有活动操作的堆栈 (在面包屑中表示), 并协调每个更改;</p><p>另一个值得注意的有趣的事情是 <code>MainComponentsContainer</code>, 它只是一个显示在 <code>main_components</code> 注册表中注册的所有组件的组件. 这就是系统其他部分扩展 <code>Web</code> 客户端的方式;</p><h2 id="environment-env环境" tabindex="-1"><a class="header-anchor" href="#environment-env环境" aria-hidden="true">#</a> Environment(env环境)</h2><p>作为 Owl 应用程序, Odoo Web 客户端定义了自己的环境 (组件可以使用 <code>this.env</code> 访问它), 以下是 <code>odoo</code> 添加到共享 <code>env</code> 对象的内容:</p>`,17),v=n("li",null,[n("strong",null,[n("code",null,"qweb")]),s(": owl 的依赖, 包含所有的模板;")],-1),m=n("strong",null,[n("code",null,"bus")],-1),b=a("<li><strong><code>services</code></strong>: 访问所有已注册的服务, 通常应该使用 <code>useService</code> hook 来访问;</li><li><strong><code>debug</code></strong>: 如果非空, 则 <code>Web</code> 客户端处于调试模式;</li><li><strong><code>_t</code></strong>: 翻译函数;</li><li><strong><code>isSmall</code></strong>: 如果为 <code>true</code>, 则 <code>Web</code> 客户端当前处于移动端模式 (屏幕宽度 &lt;= 767px)</li>",4),g=a(`<p>例如: 要翻译组件中的字符串 (注意: 模板会自动翻译, 因此在这种情况下不需要特定操作) 可以这样做:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> someString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token function">_t</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="构建模块" tabindex="-1"><a class="header-anchor" href="#构建模块" aria-hidden="true">#</a> 构建模块</h2><p>大多数的 web 客户端是由几种类的抽象方法构建的: <code>registries</code>, <code>services</code>, <code>components</code> 和 <code>hooks</code>;</p><h3 id="registries" tabindex="-1"><a class="header-anchor" href="#registries" aria-hidden="true">#</a> Registries</h3><p><code>Registries</code> 基本上是一个简单的 <code>key/value</code> 的映射, 用于存储某些特定的类型的对象, 它们是 UI 可扩展性的重要组成部分, 一旦注册了某个对象, Web 客户端的其余部分就可以使用它, 例如: <code>field_registry</code> 注册可以在视图中使用的任何字段的 <code>component</code> 组件或 <code>widget</code> 组件;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> registry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@web/core/registry&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyFieldChar</span> <span class="token keyword">extends</span> <span class="token class-name">owl<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token comment">// some code</span>
<span class="token punctuation">}</span>

registry<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token string">&quot;fields&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;my_field_char&quot;</span><span class="token punctuation">,</span> MyFieldChar<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意, 我们使用 <code>@web/core/registry</code> 导入了注册函数, 然后调用了注册字段函数;</p><h3 id="services" tabindex="-1"><a class="header-anchor" href="#services" aria-hidden="true">#</a> Services</h3><p><code>Services</code> 是提供功能的长期存在的代码片段, 它们可以由 <code>component</code> (使用 <code>useService</code>) 或其它方式导入; 此外, 他们还可以声明一组依赖项, 从这个意义上说, 服务基本上是一个 DI (依赖注入) 系统;</p><p>例如: <code>notification service</code> 提供了一种显示通知的方法, 或者 <code>rpc service</code> 向 Odoo 服务器执行请求的正确方法;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> registry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./core/registry&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myService <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;notification&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> <span class="token punctuation">{</span> notification <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            notification<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Tick Tock </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>counter<span class="token operator">++</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

serviceRegistry<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;myService&quot;</span><span class="token punctuation">,</span> myService<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="components-and-hook" tabindex="-1"><a class="header-anchor" href="#components-and-hook" aria-hidden="true">#</a> Components and Hook</h3>`,13),h=n("code",null,"components",-1),q=n("code",null,"hooks",-1),w={href:"https://github.com/odoo/owl/blob/master/doc/readme.md",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"component",-1),f={href:"https://github.com/odoo/owl/blob/master/doc/reference/hooks.md",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"hooks",-1),x=n("code",null,"mixin",-1),j=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">now</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>
    <span class="token function">onWillStart</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">onWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> state<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> Context</h2><p>odoo javascript 中的另一个重要的概念就是上下文: 它为代码提供了一种为函数调用或 rpc调用 提供了更多的上下文的方法; 在某种程度上, 它像是一个传播信息的包, 在一些特定场景下会非常有用; 例如: 让 odoo 服务器知道模型的 rpc 是来自哪一个特定的表单视图, 或者是可以激活/禁用组件中的某些功能;</p><p>odoo web 客户端中有两种不同的上下文, 是 <code>user context</code> 和 <code>action context</code>, 因此在使用上下文对象的时候应该要根据情况使用;</p><h3 id="user-context" tabindex="-1"><a class="header-anchor" href="#user-context" aria-hidden="true">#</a> User Context</h3><p><code>user context</code> 是一个小的对象, 包含与当前用户相关的各种信息, 它可以通过 <code>useService</code> hook 获得:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useService</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包含以下信息:</p><ul><li><strong><code>allowed_company_ids</code></strong>: 用户的活跃公司 ID 列表;</li><li><strong><code>lang</code></strong>: 用户当前使用语言的首选项 code;</li><li><strong><code>tz</code></strong>: 用户当前时区;</li></ul><h3 id="action-context" tabindex="-1"><a class="header-anchor" href="#action-context" aria-hidden="true">#</a> Action Context</h3><p><code>ir.actions.act_window</code> 和 <code>ir.actions.client</code> 支持可选的上下文字段, 该字段是一个代表对象的字符, 每当在 web 客户端中加载相应的操作的时候, 此上下文会被解析为对象, 并提供给与该操作相对应的组件;</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>context<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{&#39;search_default_customer&#39;: 1}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它可以以多种不同的方式使用, 例如: 视图将操作上下文添加到向服务器发出的每一个请求, 另一个重要用途是默认激活某些搜索过滤器(参考如上代码);</p><p>有时候, 当我们手动执行新操作时(在 javascript 中以编程式的方式操作), 能够扩展操作上下文会很有用, 这可以通过 <code>additional_context</code> 来完成;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> actionService <span class="token operator">=</span> <span class="token function">useService</span><span class="token punctuation">(</span><span class="token string">&quot;action&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// in some event handler</span>
actionService<span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span><span class="token string">&quot;addon_name.something&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">additional_context</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">default_period_id</span><span class="token operator">:</span> defaultPeriodId
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中, 将加载带有 <code>xml_id</code> 为 <code>addon_name.something</code> 的操作, 并且其上下文将使用 <code>default_period_id</code> 值进行扩展, 这是一个非常有用的示例; 它允许开发人员通过为下一个操作提供一些信息来将操作组合在一起;</p><h2 id="python-解释器" tabindex="-1"><a class="header-anchor" href="#python-解释器" aria-hidden="true">#</a> Python 解释器</h2><p>Odoo 框架具有内置的小型 <code>python</code> 解释器. 它的目的是评估小的 <code>python</code> 表达式. 这很重要, 因为 <code>Odoo</code> 中的视图有用 <code>python</code> 编写的修饰符, 但它们需要由浏览器解析;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> evaluateExpr <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@web/core/py_js/py&quot;</span><span class="token punctuation">;</span>

<span class="token function">evaluateExpr</span><span class="token punctuation">(</span><span class="token string">&quot;1 + 2*{&#39;a&#39;: 1}.get(&#39;b&#39;, 54) + v&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">33</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// returns 142</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>py</code> 的 <code>javascript</code> 解释器导出了 5 个函数:</p><ul><li><strong><code>tokenize(expr)</code></strong>: 参数为表达式字符串, 将返回一个 token list;</li><li><strong><code>parse(tokens)</code></strong>: 参数为 token list, 将返回一个 ast 表达式的抽象语法树结构;</li><li><strong><code>parseExpr(expr)</code></strong>: 参数为 有效 python 表达式的字符串;</li><li><strong><code>evaluate(ast[, context])</code></strong>: 参数为 ast 抽象树和 额外的上下文对象;</li><li><strong><code>evaluateExpr(expr[, context])</code></strong>: 参数为表达式字符串和额外的上下文对象;</li></ul><h2 id="domains" tabindex="-1"><a class="header-anchor" href="#domains" aria-hidden="true">#</a> Domains</h2><p>从广义上讲, odoo 中的 domain 表达式匹配某些指定条件的一组记录, 在 javascript 中, 它们通常表示为条件列表(js 语法) 或字符串表达式, 它们不是标准化的, 例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 条件列表</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;|&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment">// 字符串表达式</span>
<span class="token string">&quot;[(&#39;some_file&#39;, &#39;&gt;&#39;, a)]&quot;</span>
<span class="token string">&quot;[(&#39;date&#39;,&#39;&gt;=&#39;, (context_today() - datetime.timedelta(days=30)).strftime(&#39;%Y-%m-%d&#39;))]&quot;</span>
<span class="token string">&quot;[(&#39;date&#39;, &#39;!=&#39;, False)]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串表达式比列表表达式更强大, 它们可以包含 <code>python</code> 表达式和未计算的值, 这取决于某些计算上下文; 然而, 操作字符串表达式更加困难(需要熟悉 python 和 odoo 的模型);</p><p>由于 domain 在 web 客户端中非常重要, 因此 odoo 提供了一个 Domain 类:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token keyword">const</span> domain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
domain<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
domain<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token comment">// 返回 [&quot;|&quot;, (&quot;a&quot;, &quot;=&quot;, 1), (&quot;b&quot;, &quot;&lt;=&quot;, 3)]</span>
Domain<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;[(&#39;b&#39;, &#39;&lt;=&#39;, 3)]&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>具体源代码请查看 addons/web/static/src/core/domain.js</p></blockquote><h2 id="bus" tabindex="-1"><a class="header-anchor" href="#bus" aria-hidden="true">#</a> Bus</h2><p>web 客户端 env 对象包含一个事件总线, 名为 bus, 其目的是让系统的各个部分能够正确的自我协调, 而不会使它们耦合, <code>env.bus</code> 是一个 owl 的 <code>EventBus</code>, 应该用于感兴趣的全局事件;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>env<span class="token punctuation">.</span>bus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;WEB_CLIENT_READY&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是可以在此总线上触发的事件列表:</p><table><thead><tr><th>Message(消息名称)</th><th>Payload(参数)</th><th>Trigger(触发动作)</th></tr></thead><tbody><tr><td><code>ACTION_MANAGER:UI-UPDATED</code></td><td>UI的更新模式( <code>current</code>, <code>new</code>, <code>fullscreen</code> )</td><td>action 执行完成之后的渲染状态</td></tr><tr><td><code>ACTION_MANAGER:UPDATE</code></td><td>下一个渲染信息</td><td>动作管理器已完成下一个界面的计算</td></tr><tr><td><code>MENUS:APP-CHANGED</code></td><td>none</td><td>菜单服务的当前应用程序已更改</td></tr><tr><td><code>ROUTE_CHANGE</code></td><td>none</td><td>url 的 hash 值发生变化</td></tr><tr><td><code>RPC:REQUEST</code></td><td>rpc id</td><td>一个 rpc 请求即将发送</td></tr><tr><td><code>RPC:RESPONSE</code></td><td>rpc id</td><td>rpc 请求完成时候触发</td></tr><tr><td><code>WEB_CLIENT_READY</code></td><td>none</td><td>web 客户端挂载完成</td></tr><tr><td><code>FOCUS-VIEW</code></td><td>none</td><td>主视图聚焦</td></tr><tr><td><code>CLEAR-CACHES</code></td><td>none</td><td>应清除所有内部缓存</td></tr><tr><td><code>CLEAR-UNCOMMITTED-CHANGES</code></td><td>函数列表</td><td>所有具有未提交更改的视图都应清除它们,并在列表中推送回调</td></tr></tbody></table><h2 id="browser" tabindex="-1"><a class="header-anchor" href="#browser" aria-hidden="true">#</a> Browser</h2><p><code>javascript</code> 框架还提供了一个特殊的对象浏览器, 可以访问许多浏览器 <code>API</code>, 例如 <code>location</code>、<code>localStorage</code> 或 <code>setTimeout</code>, 示例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> browser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@web/core/browser/browser&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// somewhere in code</span>
browser<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>someFunction<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这在 web 端可能没什么作用, 对于测试用例来说, 是比较有用的, 可以在测试期间模拟相关函数, 轻松测试所有使用浏览器对象的代码; 以下是 <code>browser</code> 下提供的方法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>addEventListener<span class="token punctuation">,</span> 
cancelAnimationFrame<span class="token punctuation">,</span> 
clearInterval<span class="token punctuation">,</span> 
clearTimeout<span class="token punctuation">,</span> 
console<span class="token punctuation">,</span> 
Date<span class="token punctuation">,</span> 
fetch<span class="token punctuation">,</span> 
history<span class="token punctuation">,</span> 
localStorage<span class="token punctuation">,</span> 
location<span class="token punctuation">,</span> 
navigator<span class="token punctuation">,</span> 
open<span class="token punctuation">,</span> 
random<span class="token punctuation">,</span> 
removeEventListener<span class="token punctuation">,</span> 
requestAnimationFrame<span class="token punctuation">,</span>
sessionStorage<span class="token punctuation">,</span>
setInterval<span class="token punctuation">,</span>
setTimeout<span class="token punctuation">,</span>
XMLHttpRequest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debug-模式" tabindex="-1"><a class="header-anchor" href="#debug-模式" aria-hidden="true">#</a> Debug 模式</h2><p>Odoo 有时可以在称为调试模式的特殊模式下运行, 它有两个主要用途:</p><ul><li>显示某些视图下特定的附加信息/字段;</li><li>提供一些额外的工具来帮助开发人员调试 Odoo 界面;</li></ul><p><code>debug</code> 模式由字符串描述, 空字符串表示 <code>debug</code> 模式未激活, 否则就是激活的; 如果字符串包含 <code>assets</code> 或 <code>tests</code>, 则激活相应的特定子模式, 两种模式可以同时激活, 例如使用字符串 <code>assets,tests</code>;</p><p>调试模式当前值可以在环境中读取 <code>env.debug</code>;</p><blockquote><p>小技巧: 要仅在调试模式下显示菜单、字段或视图元素, 您应该给字段添加用户组 <code>base.group_no_one</code></p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>field_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">groups</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>base.group_no_one<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="assets-模式" tabindex="-1"><a class="header-anchor" href="#assets-模式" aria-hidden="true">#</a> Assets 模式</h3><p><code>debug=assets</code> 模式对调试 javascript 代码非常有用, 一旦激活, <code>assets</code> 资源将不再被压缩, 并且还会生成 <code>sourceMap</code> 映射, 这使调试所有类型的 <code>javascript</code> 代码非常有用;</p><h3 id="tests-模式" tabindex="-1"><a class="header-anchor" href="#tests-模式" aria-hidden="true">#</a> Tests 模式</h3><p>还有另一个名为 <code>tests</code> 的子模式, 如果启用, 服务器会在页面中注入包 <code>web.assets_tests</code>, 该 <code>bundle</code> 资源主要包含测试用例,</p><h3 id="激活方式" tabindex="-1"><a class="header-anchor" href="#激活方式" aria-hidden="true">#</a> 激活方式</h3><ol><li>url 激活, 这个不用详细说明, 前面的章节已经描述过, 在 url 的 <code>web?debug=1</code> 即可;</li><li>通过命令面板激活, 在 Odoo 中, 命令调板工具有一个激活调试模式的命令; 使用键盘快捷键 ctrl+k 打开命令调色板工具, 然后输入 <code>debug</code>;</li></ol><p><img src="`+d+'" alt="debug"></p>',52);function E(C,S){const p=o("RouterLink"),e=o("ExternalLinkIcon");return i(),u("div",null,[k,n("ul",null,[v,n("li",null,[m,s(": "),t(p,{to:"/pages/web-server/odoo/section-03/%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0.html#bus"},{default:l(()=>[s("Bus")]),_:1}),s("对象, 用于协调一些通用事件;")]),b]),g,n("p",null,[h,s(" 和 "),q,s(" 是 "),n("a",w,[s("owl 组件"),t(e)]),s(" 系统的功能, odoo 的 "),y,s(" 组件是由 owl 构建, 也是 web 客户端的一部分;")]),n("p",null,[n("a",f,[_,t(e)]),s(" 是一种分解代码的方法, 即使它取决于组件的生命周期, 这是在组件中注入功能的一种组合方式, 它们也可以被视为一种 "),x,s(";")]),j])}const T=c(r,[["render",E],["__file","框架概述.html.vue"]]);export{T as default};
