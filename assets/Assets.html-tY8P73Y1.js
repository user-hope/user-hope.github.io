import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as i,d as a,e as t,f as h,a as d,r as p,o as k}from"./app-DcYe3e8P.js";const r={};function o(c,s){const e=p("RouteLink");return k(),l("div",null,[s[3]||(s[3]=i("h2",{id:"资源",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#资源"},[i("span",null,"资源")])],-1)),i("p",null,[s[1]||(s[1]=a("在 odoo 中, 管理资源文件并不像其他的应用程序中这么简单, 原因之一就是 odoo 里面面临着许多中情况, 有些情况下, 需要加载一部分资源, 例如: 网络客户端, 销售点等应用程序; 此外, 某些资源文件可能会比较大, 但是很少有场景使用, 这个时候, 就可以使用懒加载来完成")),t(e,{to:"/pages/web-server/odoo/section-03/Assets.html#%E6%87%92%E5%8A%A0%E8%BD%BD"},{default:h(()=>s[0]||(s[0]=[a("按需加载")])),_:1}),s[2]||(s[2]=a("资源;"))]),s[4]||(s[4]=d(`<h3 id="资源类型" tabindex="-1"><a class="header-anchor" href="#资源类型"><span>资源类型</span></a></h3><p>在 odoo 中, 资源被分为三种不同的类型: 代码 (js文件), 样式(css 或 scss) 和模板(xml文件);</p><p><strong>代码</strong></p><p>odoo 支持三种不同类型的 javascript 的模块文件, 然后处理所有这些文件 (原生 js 模块转换为 odoo 模块), 然后压缩文件 (如果不是在 debug=assets) 模式下, 被压缩的文件将作为附件存储在附件表总, 这些文件附件通常通过页面的 <code>&lt;head&gt;</code> 部分中的 <code>&lt;script&gt;</code> 标记加载(作为静态文件);</p><p><strong>样式</strong></p><p>odoo 中的样式可以支持 css 或者是 scss, 与 javascript 文件一样, 这些文件会被 (scss 文件转换为 css), 然后压缩 (同样, 如果不是在 debug=assets) 模式下, 同样, 结果也会保存为附件, 他们通常通过页面的 <code>&lt;head&gt;</code> 部分中的 <code>&lt;link&gt;</code> 标签加载;</p><p><strong>模板文件</strong></p><p>模板 (xml 文件) 以不同的方式处理: 只要需要它们, 就简单的从文件系统中读取它们, 然后将他们渲染出来; 每当浏览器加载 odoo 时候, 它都会调用 <code>/web/webclient/qweb/</code> controller 来获取模板;</p><h2 id="bundles" tabindex="-1"><a class="header-anchor" href="#bundles"><span>Bundles</span></a></h2><p>odoo 中将每一种类型的资源作为一个资源包打包到一起, 每个资源包 (特定类型的文件路径列表: xml, js, css 或者是 scss) 都列在模块清单中, 可以使用 <a href="https://rgb-24bit.github.io/blog/2018/glob.html" target="_blank" rel="noopener noreferrer"><code>glob</code></a> 语法来声明, 这意味着可以使用一行声明多个资源文件;</p><p>这些 <code>bundle</code> 包在每一个模块的 <code>__manifest__.py</code> 中定义, 并带有包含字典的专用资源包的键名, 字典将包名(键) 映射到它们包含的文件列表(值), 它们一般是这样的:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;assets&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;web.assets_backend&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &#39;web/static/src/xml/**/*&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;web.assets_common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &#39;web/static/lib/bootstrap/**/*&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &#39;web/static/src/js/boot.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &#39;web/static/src/js/webclient.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;web.qunit_suite_tests&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &#39;web/static/src/js/webclient_tests.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是大多数经常使用到的资源包名:</p><ul><li><strong><code>web.assets_common</code></strong>: 该资源包包含网络客户端, 网站和销售点等常见的大部分资源; 这包含 odoo 较为核心的模块, 比如: <code>boot.js</code> 文件, 该文件定义了 odoo 模块系统;</li><li><strong><code>web.assets_backend</code></strong>: 该资源包包含特定于 web 服户端(前端)的代码;</li><li><strong><code>web.assets_frontend</code></strong>: 该资源包包含特定于 web 网站端(前端)的代码;</li><li><strong><code>web.qunit_suite_tests</code></strong>: 所有的 javascript 单元测试代码; (tests, helpers, mocks)</li><li><strong><code>web.qunit_mobile_suite_tests</code></strong>: 移动端特定的单元测试代码;</li></ul><h3 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符"><span>操作符</span></a></h3><p>通常, 处理资源文件很简单: 只需要将一些新的文件添加到常用的 <code>bundle</code> 包中, 例如: <code>assets_common</code> 或 <code>assets_backend</code>, 但还有其他的操作可以用于一些更加具体的使用场景;</p><p>请注意, 针对某个资源文件的所有操作符(即 <code>before</code>, <code>after</code>, <code>replace</code>, <code>remove</code>), 都需要预先声明该文件, 无论是在层次结构中较高的 list 中, 还是具有较低排序的 <code>ir.asset</code> 记录中;</p><p><strong>append</strong></p><p>此操作添加一个或多个文件, 由于它是最常见的操作, 因此可以通过简单地使用文件名来完成:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web.assets_common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;my_addon/static/src/js/**/*&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下, 向包中添加简单字符串会将与 <code>glob</code> 模式匹配的文件附加到包的末尾, 该模式也可以直接是单个文件路径;</p><p><strong>prepend</strong></p><p>在资源包的开头添加一个或多个文件; 当我们需要将某个文件放在 <code>bundle</code> 包中的其他文件之前 (例如 css 文件) 时很有用, 可以使用以下语法 <code>(&#39;prepend&#39;, &lt;path&gt;)</code>:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web.assets_common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;prepend&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;my_addon/static/src/css/bootstrap_overridden.scss&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>before</strong></p><p>在特定文件之前添加一个或多个文件; 在包的开头添加文件可能不够精确, <code>before</code> 指令可用于在目标文件之前添加给定文件; 它是通过用 3 元素元组 <code>(&#39;before&#39;, &lt;target&gt;, &lt;path&gt;)</code> 来声明的:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web.assets_common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;before&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web/static/src/css/bootstrap_overridden.scss&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;my_addon/static/src/css/bootstrap_overridden.scss&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>after</strong></p><p>在特定文件后添加一个或多个文件, 与 <code>before</code> 相同, 匹配的文件附加在目标文件之后, 它是通过用 3 元素元组 <code>(&#39;after&#39;, &lt;target&gt;, &lt;path&gt;)</code> 来声明的:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web.assets_common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;after&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web/static/src/css/list_view.scss&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;my_addon/static/src/css/list_view.scss&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>include</strong></p><p>使用嵌套 <code>bundle</code> 包; <code>include</code> 指令是一种在其他 <code>bundle</code> 包中使用 <code>bundle</code> 包, 以最小化 list 的方法, 在 odoo 中, 我们使用子包 (按照惯例以下划线为前缀) 来批处理多个其他包中使用的文件; 然后可以将子包指定为一对 <code>(&#39;include&#39;, &lt;bundle&gt;)</code>:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web.assets_common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;include&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web._primary_variables&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>remove</strong></p><p>删除一个或多个文件; 在某些情况下, 您可能希望从捆绑包中删除一个或多个文件; 这可以通过指定 <code>(&#39;remove&#39;, &lt;target&gt;)</code> 使用删除指令来完成:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web.assets_common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;remove&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web/static/src/js/boot.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>replace</strong></p><p>将资源文件替换为一个或多个文件; 假设某个资产不仅需要删除, 而且您还希望在同一位置插入该资产的新版本, 这可以通过指定 <code>(&#39;replace&#39;, &lt;target&gt;, &lt;path&gt;)</code> 来完成:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web.assets_common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;replace&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web/static/src/js/boot.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;my_addon/static/src/js/boot.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加载顺序" tabindex="-1"><a class="header-anchor" href="#加载顺序"><span>加载顺序</span></a></h3><p>资源加载的顺序有时很关键, 并且必须是确定性的, 主要针对样式表优先级和设置脚本; odoo 中的资源加载顺序如下:</p><ol><li>当调用资源包时 (例如 <code>t-call-assets=&#39;web.assets_common&#39;</code>), 会生成一个空的资源列表;</li><li>所有类型为 <code>ir.asset</code> 的记录将被获取并按 <code>sequence</code> 进行排序; 然后, 所有 <code>sequence</code> 严格小于 16 的记录将被处理并应用于当前的资产列表中;</li><li>所有声明在 <code>assets</code> 中为指定捆绑包提供资产的模块, 将其资源应用于该列表; 这是根据模块依赖关系的顺序进行的 (例如: <code>web</code> 模块的 <code>bundle</code> 在 <code>website</code>之前处理); 如果一个指令尝试添加一个已经存在于列表中的文件, 那么对于该文件将不会有任何操作. 换句话说, 列表中只保留文件的第一次出现;</li><li>处理并应用剩余的 <code>ir.asset</code> 记录 (那些序列大于或等于 16 的记录)</li></ol><p><code>assets</code> 中声明的资源可能需要按特定顺序加载, 例如, 加载 lib 文件夹时, 必须在所有其他 <code>jquery</code> 脚本之前加载 <code>jquery.js</code>; 一种解决方案是创建具有较低 <code>sequence</code> 或 <code>prepend</code> 指令的 <code>ir.asset</code> 记录, 但还有另一种更简单的方法;</p><p>由于 <code>assets</code> 中的每一个文件路径的唯一性得到保证, 因此您可以在包含该文件的 <code>glob</code> 之前声明任何特定文件, 因此, 该文件将出现在列表中, 优先于 <code>glob</code> 中包含的所有其他文件的加载;</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;web.assets_common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;my_addon/static/lib/jquery/jquery.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;my_addon/static/lib/jquery/**/*&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载"><span>懒加载</span></a></h2><p>有时动态加载 文件和/或资源包 很有用, 例如仅在需要时加载库; 为此, Odoo 框架提供了一些辅助函数, 位于 <code>@web/core/assets</code> 包中; 可以查看源码: <code>addons/web/static/src/core/assets.js</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadBundle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    jsLibs</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/web/static/lib/stacktracejs/stacktrace.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loadbundle-assets" tabindex="-1"><a class="header-anchor" href="#loadbundle-assets"><span>loadBundle(assets)</span></a></h3><p>加载声明的资源文件, 它是一个可能包含以下键的对象:</p><ul><li><strong><code>jsLibs</code></strong>: <code>string[]</code>, javascript 文件 list;</li><li><strong><code>cssLibs</code></strong>: <code>string[]</code>, css 文件 list;</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">loadBundle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@web/core/assets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MassMailingHtmlField</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HtmlField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    async</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> startWysiwyg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        await</span><span style="--shiki-light:#E45649;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;"> super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">startWysiwyg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        await</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadBundle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            jsLibs</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                &#39;/mass_mailing/static/src/js/mass_mailing_link_dialog_fix.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                &#39;/mass_mailing/static/src/js/mass_mailing_snippets.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                &#39;/mass_mailing/static/src/snippets/s_masonry_block/options.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                &#39;/mass_mailing/static/src/snippets/s_media_list/options.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                &#39;/mass_mailing/static/src/snippets/s_showcase/options.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                &#39;/mass_mailing/static/src/snippets/s_rating/options.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // code</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ir-asset-模型" tabindex="-1"><a class="header-anchor" href="#ir-asset-模型"><span>ir.asset 模型</span></a></h2><p>在大多数情况下, <code>assets</code> 中的资源文件基本上就足够了; 然而, 为了获得更大的灵活性, 该框架还支持在数据库中声明的动态资源;</p><p>这是可以通过创建 <code>ir.asset</code> 记录来完成;</p><blockquote><p>具体模型定义可以查看源码 odoo/addons/base/models/ir_asset.py</p></blockquote><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># example</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.env[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ir.asset&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;name&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;bundle&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;test_assetsbundle.manifest4&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;path&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/test_assetsbundle/static/src/*/**&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;target&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/test_assetsbundle/static/src/js/test_jsfile3.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;directive&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;after&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57))])}const B=n(r,[["render",o],["__file","Assets.html.vue"]]),b=JSON.parse('{"path":"/pages/web-server/odoo/section-03/Assets.html","title":"","lang":"zh-CN","frontmatter":{"headerDepth":4,"prev":{"link":"/pages/web-server/odoo/section-03/框架概述.md"},"next":{"link":"/pages/web-server/odoo/section-03/JavaScript模块.md"},"description":"资源 在 odoo 中, 管理资源文件并不像其他的应用程序中这么简单, 原因之一就是 odoo 里面面临着许多中情况, 有些情况下, 需要加载一部分资源, 例如: 网络客户端, 销售点等应用程序; 此外, 某些资源文件可能会比较大, 但是很少有场景使用, 这个时候, 就可以使用懒加载来完成资源; 资源类型 在 odoo 中, 资源被分为三种不同的类型:...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/user-hope/user-hope.github.io/pages/web-server/odoo/section-03/Assets.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:description","content":"资源 在 odoo 中, 管理资源文件并不像其他的应用程序中这么简单, 原因之一就是 odoo 里面面临着许多中情况, 有些情况下, 需要加载一部分资源, 例如: 网络客户端, 销售点等应用程序; 此外, 某些资源文件可能会比较大, 但是很少有场景使用, 这个时候, 就可以使用懒加载来完成资源; 资源类型 在 odoo 中, 资源被分为三种不同的类型:..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://github.com/user-hope/user-hope.github.io\\"}]}"]]},"headers":[{"level":2,"title":"资源","slug":"资源","link":"#资源","children":[{"level":3,"title":"资源类型","slug":"资源类型","link":"#资源类型","children":[]}]},{"level":2,"title":"Bundles","slug":"bundles","link":"#bundles","children":[{"level":3,"title":"操作符","slug":"操作符","link":"#操作符","children":[]},{"level":3,"title":"加载顺序","slug":"加载顺序","link":"#加载顺序","children":[]}]},{"level":2,"title":"懒加载","slug":"懒加载","link":"#懒加载","children":[{"level":3,"title":"loadBundle(assets)","slug":"loadbundle-assets","link":"#loadbundle-assets","children":[]}]},{"level":2,"title":"ir.asset 模型","slug":"ir-asset-模型","link":"#ir-asset-模型","children":[]}],"readingTime":{"minutes":6.57,"words":1972},"filePathRelative":"pages/web-server/odoo/section-03/Assets.md","autoDesc":true,"excerpt":"<h2>资源</h2>\\n<p>在 odoo 中, 管理资源文件并不像其他的应用程序中这么简单, 原因之一就是 odoo 里面面临着许多中情况, 有些情况下, 需要加载一部分资源, 例如: 网络客户端, 销售点等应用程序; 此外, 某些资源文件可能会比较大, 但是很少有场景使用, 这个时候, 就可以使用懒加载来完成<a href=\\"/pages/web-server/odoo/section-03/Assets.html#%E6%87%92%E5%8A%A0%E8%BD%BD\\" target=\\"_blank\\">按需加载</a>资源;</p>\\n<h3>资源类型</h3>\\n<p>在 odoo 中, 资源被分为三种不同的类型: 代码 (js文件), 样式(css 或 scss) 和模板(xml文件);</p>"}');export{B as comp,b as data};
