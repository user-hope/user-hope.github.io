import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-9b0cd270.js";const e={},o=t(`<h2 id="字段类型" tabindex="-1"><a class="header-anchor" href="#字段类型" aria-hidden="true">#</a> 字段类型</h2><p>上面一节中, 我们介绍了如何从 0-1 创建一个模块, 以及模块的组成; 下面我们从 odoo 的模型的字段进行学习;</p><p>odoo 的常用字段大致分为四类:</p><ul><li><strong>基本字段</strong>： <ul><li><strong><code>Boolean</code></strong>: 布尔类型</li><li><strong><code>Char</code></strong>: 字符类型</li><li><strong><code>Float</code></strong>: 浮点数</li><li><strong><code>Integer</code></strong>: 整数</li></ul></li><li><strong>高级字段</strong>: <ul><li><strong><code>Binary</code></strong>: 存储二进制数据</li><li><strong><code>Html</code></strong>: html 代码内容</li><li><strong><code>Image</code></strong>: 图片, 基于 <code>Binary</code> 的二进制字段</li><li><strong><code>Monetary</code></strong>: 货币浮点数, (使用这个字段会自动从上下文中关联币种)</li><li><strong><code>Selection</code></strong>: 枚举值</li><li><strong><code>Text</code></strong>: 与 <code>Char</code> 字段非常相似, 但用于较长的内容, 没有大小限制; 通常在页面上展示为多行文本框;</li><li><strong><code>Date</code></strong>: 封装 <code>Python</code> 的 <code>Date</code> 对象; 用于表示 <code>YYYY-MM-DD</code> 格式的日期;</li><li><strong><code>DateTime</code></strong>: 封装 <code>Python</code> 的 <code>DateTime</code> 对象; 用于表示 <code>YYYY-MM-DD HH:MM:SS</code> 格式的日期;</li><li><strong><code>Many2one</code></strong>: 关联字段, 用于表示多对一的关系;</li><li><strong><code>One2Many</code></strong>: 关联字段, 用于表示一对多的关系;</li><li><strong><code>Many2many</code></strong>: 关联字段, 用于表示多对多的关系;</li><li><strong><code>Command</code></strong>: <code>One2many</code> 和 <code>Many2many</code> 字段需要一个特殊的命令来处理他们之间的实现关系;</li></ul></li><li><strong>自动计算字段</strong>: <ul><li><strong><code>id</code></strong>: 每一条数据记录的唯一标识, 由 orm 自动生成;</li><li><strong><code>create_date</code></strong>: 记录创建的时间 <code>DateTime</code> 类型;</li><li><strong><code>create_uid</code></strong>: 记录创建的创建人, 是一个 <code>Many2one</code> 关联 <code>res.users</code> 类型;</li><li><strong><code>write_date</code></strong>: 记录更新的时间, <code>DateTime</code> 类型;</li><li><strong><code>write_uid</code></strong>: 记录更新的人员, 是一个 <code>Many2one</code> 关联 <code>res.users</code> 类型;</li></ul></li><li><strong>保留字段</strong><ul><li><strong><code>name</code></strong>: 默认取值为模型的 <code>_rec_name</code> 指定的字段名; 用于被关联字段使用时展示的名称; <code>Char</code> 类型;</li><li><strong><code>active</code></strong>: 数据记录的全局可见性; (数据库层面的物理删除和逻辑删除); <code>Boolean</code> 类型;</li><li><strong><code>state</code></strong>: 记录的声明周期阶段; 由字段上面的 <code>states</code> 属性使用; <code>Selection</code> 类型;</li><li><strong><code>parent_id</code></strong>: 默认取值为模型的 <code>_parent_name</code> 指定的字段名; 被用作树形结构记录中; 可以在 <code>domain</code> 里面使用 <code>child_of</code>, <code>parent_of</code> 进行搜索数据; <code>Many2one</code> 类型</li><li><strong><code>parent_path</code></strong>: 当模型的 <code>_parent_store</code> 设置为 <code>True</code>时, 用于存储反<code>_parent_name</code>树结构的值; 它必须使用 <code>index=True</code> 参数才能正常操作; <code>Char</code> 类型</li><li><strong><code>company_id</code></strong>: 用于 odoo 多公司行为的主字段; <code>Many2one</code> 类型, 关联 <code>res_company</code></li></ul></li></ul><h2 id="字段属性" tabindex="-1"><a class="header-anchor" href="#字段属性" aria-hidden="true">#</a> 字段属性</h2><p><code>Odoo</code> 使用了自己编写的 <code>ORM</code> 框架, 它有着自己的一套与数据库映射的关系逻辑; 每个字段都可以添加一些属性, 使其管理对记录上相应字段的访问和分配;</p><h3 id="通用字段属性" tabindex="-1"><a class="header-anchor" href="#通用字段属性" aria-hidden="true">#</a> 通用字段属性</h3><p>字段类型有上面的这么多种类, 每种字段都可以传入一些属性, 下面这些是所有字段都可以使用的通用属性:</p><ul><li><strong><code>string</code></strong>: 用户看到的字段名称, 如果未设置, ORM 将自动采用字段名称(大写); <code>str</code> 类型</li><li><strong><code>help</code></strong>: <code>debug</code> 模式下面看到的字段 <code>tooltip</code> 的提示信息; <code>str</code> 类型</li><li><strong><code>invisible</code></strong>: 字段是否不可见, 默认为 <code>False</code>; <code>bool</code> 类型</li><li><strong><code>readonly</code></strong>: 字段是否只读, 默认为 <code>False</code>; <code>bool</code> 类型</li><li><strong><code>required</code></strong>: 字段是否必填, 默认为 <code>False</code>; <code>bool</code> 类型</li><li><strong><code>index</code></strong>: 字段是否在数据库中建立索引, 以及索引的类型; <code>str</code> 类型</li><li><strong><code>default</code></strong>: 字段的默认值, 这是一个静态的值, 或者是可以使用 <code>lambda</code> 表达式的函数返回值; 默认为 <code>None</code>;</li><li><strong><code>states</code></strong>: 字典, 其将状态值映射到 UI 属性值对的列表; 可能的属性有: <code>readonly</code>, <code>required</code>, <code>invisible</code>; (依赖模型里面的 state 属性)</li><li><strong><code>groups</code></strong>: 以逗号分隔的组 <code>xml id</code> 列表, 将字段访问权限限制为给定组的用户;</li><li><strong><code>company_dependent</code></strong>: 该值未存储在模型表中, 它被注册为 <code>ir.properties</code>. 当需要 <code>company_dependent</code> 字段的值时, 会搜索一个 <code>ir.properties</code> ,链接到当前公司(如果存在一个属性, 则链接到当前记录);</li><li><strong><code>copy</code></strong>: 当记录重复时, 是否应复制字段值(默认值: 对于普通字段为 True, 对于 one2many 和计算字段为 False);</li><li><strong><code>store</code></strong>: 字段是否存储在数据库中; (默认值: True, 计算字段为 False);</li><li><strong><code>group_operator</code></strong>: 在对该字段进行分组时, <code>read_group()</code> 使用的聚合函数; 支持的值: <code>array_agg</code>, <code>count</code>, <code>count_distinct</code>, <code>bool_and</code>, <code>bool_or</code>, <code>max</code>, <code>min</code>, <code>avg</code>, <code>sum</code>;</li><li><strong><code>group_expand</code></strong>: 函数, 用于在对当前字段进行分组时展开 <code>read_group</code> 结果;</li></ul><h3 id="char" tabindex="-1"><a class="header-anchor" href="#char" aria-hidden="true">#</a> Char</h3><p>字符类型, 对应数据库中 <code>varchar</code> 类型, 除了通用类型外接收另外几个参数:</p><ul><li><strong><code>size</code></strong>: 为该字段存储的值的最大大小; 超出长度自动截断; <code>int</code> 类型;</li><li><strong><code>trim</code></strong>: 是否自动去除空格; 默认为 <code>True</code>; <code>bool</code> 类型;</li><li><strong><code>translate</code></strong>: <code>translate=True</code> 将字段值作为一个整体进行转换; 也可以使用函数返回值来检索术语的翻译来翻译值; <code>bool</code> 或 函数类型;</li></ul><h3 id="float" tabindex="-1"><a class="header-anchor" href="#float" aria-hidden="true">#</a> Float</h3><p>浮点数, 兼容数据库中 <code>int4</code>, <code>numberic</code>, <code>float8</code> 类型;</p><ul><li><strong><code>digits</code></strong>: 可以使用 <code>digits</code> 属性来指定小数的精度;</li></ul><p>例如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 这里是一个元组, 16 代表整个数据的长度, 3 代表小数位的位数;</span>
price <span class="token operator">=</span> fields<span class="token punctuation">.</span>Float<span class="token punctuation">(</span><span class="token string">&#39;Price&#39;</span><span class="token punctuation">,</span> digits<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Float</code> 类型的字段也可以显示为货币类型, 方法是在 <code>xml</code> 中使用 <code>monetary</code> 小部件;</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>price<span class="token punctuation">&quot;</span></span> <span class="token attr-name">widget</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>monetary<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Float</code> 字段还提供了一些静态方法:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 用计量单位的精度对一个量进行四舍五入</span>
fields<span class="token punctuation">.</span>Float<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>product_uom_qty<span class="token punctuation">,</span> precision_rounding<span class="token operator">=</span>self<span class="token punctuation">.</span>product_uom_id<span class="token punctuation">.</span>rounding<span class="token punctuation">)</span>

<span class="token comment"># 用计量单位的精度检查数量是否为零</span>
fields<span class="token punctuation">.</span>Float<span class="token punctuation">.</span>is_zero<span class="token punctuation">(</span>self<span class="token punctuation">.</span>product_uom_qty<span class="token punctuation">,</span> precision_rounding<span class="token operator">=</span>self<span class="token punctuation">.</span>product_uom_id<span class="token punctuation">.</span>rounding<span class="token punctuation">)</span>

<span class="token comment"># 比较两个数值</span>
result <span class="token operator">=</span> field<span class="token punctuation">.</span>Float<span class="token punctuation">.</span>compare<span class="token punctuation">(</span>self<span class="token punctuation">.</span>product_uom_qty<span class="token punctuation">,</span> self<span class="token punctuation">.</span>qty_done<span class="token punctuation">,</span> precision_rounding<span class="token operator">=</span>self<span class="token punctuation">.</span>product_uom_id<span class="token punctuation">.</span>rounding<span class="token punctuation">)</span>

<span class="token comment"># result == 0  则两个值相等</span>
<span class="token comment"># result &lt; 0   则第一个浮点数小于第二个浮点数</span>
<span class="token comment"># result &gt; 0   则第一个浮点数大于第二个浮点数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binary" tabindex="-1"><a class="header-anchor" href="#binary" aria-hidden="true">#</a> Binary</h3><p>二进制文件类型, 除通用参数以外, 还可以传入:</p><ul><li><strong><code>attachment</code></strong>: 二进制文件作为附件存储时存在服务器指定的文件夹路径中, 否则存在数据库中; <code>bool</code> 类型; 对应的数据库类型为 <code>byte</code>;</li></ul><p>二进制字段通常以 <code>base64</code> 编码的形式存储在数据库中, 因此在展示时, 需要将 <code>base64</code> 进行解码输出; 另外, 二进制文件在 <code>form</code> 表单中只读状态下表现为下载按钮, 但不包含原始的文件名;</p><h3 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> Html</h3><p>Html 类型, 用于存储一段HTML代码, 对应数据库中的 <code>text</code> 类型, 接收下面几个参数:</p><ul><li><strong><code>sanitize</code></strong>: 是否过滤安全字符 (默认True);</li><li><strong><code>sanitize_overridable</code></strong>: <code>base.group_sanitize_override</code> 组的 <code>users</code> 用户是否可以绕过环境检测; (默认为 False)</li><li><strong><code>sanitize_tags</code></strong>: 是否过滤 <code>html</code> 标签; (只接收白名单列表标签, 默认为 True)</li><li><strong><code>sanitize_attributes</code></strong>: 是否过滤 <code>html</code> 属性 (只接收白名单列表属性, 默认 True)</li><li><strong><code>sanitize_style</code></strong>: 是否过滤 <code>style</code> 属性 (默认 False)</li><li><strong><code>strip_style</code></strong>: 是否去除 <code>style</code> 属性中的空格 (默认 False)</li><li><strong><code>strip_classes</code></strong>: 是否去除 <code>class</code> 属性中的空格 (默认 False)</li></ul><h3 id="image" tabindex="-1"><a class="header-anchor" href="#image" aria-hidden="true">#</a> Image</h3><p>图像格式, 还可以接收 3 个参数:</p><ul><li><strong><code>max_width</code></strong>: 图片的最大宽度; (默认 0, 无限制)</li><li><strong><code>max_height</code></strong>: 图片的最大高度; (默认 0, 无限制)</li><li><strong><code>verify_resolution</code></strong>: 是否应验证图像分辨率以确保其不会超过最大图像分辨率; (默认 True)</li></ul><p>如果传入的图像大小超过 <code>max_with/max_height</code> 限制, 则将会通过保持纵横比来调整图像大小;</p><blockquote><p>如果没有指定 <code>max_width/max_height</code>, 并且 <code>verify_resolution</code> 为 False, 则不会验证字段内容;</p></blockquote><h3 id="monetary" tabindex="-1"><a class="header-anchor" href="#monetary" aria-hidden="true">#</a> Monetary</h3><p>odoo 中对货币类型的数值单独做了一个字段来处理; <code>Monetary</code> 的使用方法基本同 <code>Float</code> 一致, 不同的是 <code>Monetary</code> 的值精度更高, 同时 <code>Monetary</code> 的值还依赖于当前环境的币种;</p><p>默认情况下要使用 <code>Monetary</code> 字段, 需要在当前模型中同时新增一个 <code>currency_id</code> 的 <code>Many2one</code> 的字段, 该字段表明本模型使用的货币类型 <code>res.currency</code>;</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>currency_id <span class="token operator">=</span> fields<span class="token punctuation">.</span>Monetary<span class="token punctuation">(</span><span class="token string">&quot;res.currency&quot;</span><span class="token punctuation">,</span> string<span class="token operator">=</span><span class="token string">&quot;Currency&quot;</span><span class="token punctuation">)</span>
amount <span class="token operator">=</span> fields<span class="token punctuation">.</span>Monetary<span class="token punctuation">(</span><span class="token string">&quot;Amount&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想使用默认的 <code>currency_id</code> 字段, 可以指定 <code>currency_field</code> 属性来指定币种字段;</p><h3 id="selection" tabindex="-1"><a class="header-anchor" href="#selection" aria-hidden="true">#</a> Selection</h3><p>下拉选择类型, 多选一类型, 不同于 <code>Many2one</code> 类型, <code>Selection</code> 类型在数据库中对应的类型是 <code>int4</code> 或 <code>varchar</code> 类型;</p><p>除了通用属性, 还接收:</p><ul><li><strong><code>selection</code></strong>: 可选的范围值, 值和名称组成的元组列表;</li><li><strong><code>selection_add</code></strong>: 在重写字段的情况下, 提供了扩展的方法;</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>selection <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
selection_add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">&gt;</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>ondelete</code></strong>: 为任何具有 <code>selection_add</code> 的重写字段提供了回退机制;</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>amount_type <span class="token operator">=</span> fields<span class="token punctuation">.</span>Selection<span class="token punctuation">(</span>selection_add<span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Python Code&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;cascade&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>ondelete</code></strong> 的可选项有:</p><ul><li><strong><code>set null</code></strong>: 默认情况下, 所有具有此选项的记录的选择值都将设置为 <code>False</code>;</li><li><strong><code>cascade</code></strong>: 具有此选项的所有记录将与选项本身一起删除;</li><li><strong><code>set default</code>:</strong> 具有此选项的所有记录都将设置为字段定义的默认值;</li><li><strong><code>set VALUE</code></strong>: 所有具有此选项的记录都将设置为给定值;</li></ul><p>例如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>amount_type <span class="token operator">=</span> fields<span class="token punctuation">.</span>Selection<span class="token punctuation">(</span>selection_add<span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Python Code&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> recs<span class="token punctuation">:</span> recs<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;amount_type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;percent&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> Date</h3><p>日期类型, 对应于数据库中的 <code>date</code> 类型, 该字段包括如下几个特有方法:</p><blockquote><p>Date 和 Datetime 字段类具有助手方法, 可尝试转换为兼容类型:</p></blockquote><ul><li><strong><code>to_date()</code></strong>: 转换为 <code>datetime.date</code>;</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>to_date<span class="token punctuation">(</span><span class="token string">&#39;2023-11-29&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong><code>add(value, *args, **kwargs)</code></strong>: 在 value 的基础上相加的值</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>add<span class="token punctuation">(</span>fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>add<span class="token punctuation">(</span>fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> months<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>context_today(record, timestamp=None)</code></strong>: 以适合日期字段的格式返回客户端时区中的当前日期</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>today <span class="token operator">=</span> fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>context_today<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong><code>to_string(value)</code></strong>: 将时间值转为文本</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>date<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong><code>today()</code></strong>: 获取当天的日期;</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>date <span class="token operator">=</span> fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="datetime" tabindex="-1"><a class="header-anchor" href="#datetime" aria-hidden="true">#</a> Datetime</h3><ul><li><strong><code>to_datetime(value)</code></strong>: 将字符转换成日期时间格式</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fields<span class="token punctuation">.</span>Datetime<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token string">&#39;2023-11-23 16:00:00&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong><code>add(value, *args, **kwargs)</code></strong>: 在 value 的基础上相加的值</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fields<span class="token punctuation">.</span>Datetime<span class="token punctuation">.</span>add<span class="token punctuation">(</span>fields<span class="token punctuation">.</span>Datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> days<span class="token operator">=</span><span class="token number">365</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong><code>context_timestamp(record, timestamp)</code></strong>: 客户端时区的当前时间戳</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>timestamp <span class="token operator">=</span> fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>context_today<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong><code>now(*args)</code></strong>: 当前时间</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>date_start <span class="token operator">=</span> fields<span class="token punctuation">.</span>Datetime<span class="token punctuation">(</span><span class="token string">&quot;Start Time&quot;</span><span class="token punctuation">,</span>default<span class="token operator">=</span>fields<span class="token punctuation">.</span>Datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong><code>to_string(value)</code></strong>: 将时间值转成文本</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span>self<span class="token punctuation">.</span>datetime<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong><code>today(*args)</code></strong>: 当前日期</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>date <span class="token operator">=</span> fields<span class="token punctuation">.</span>Date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="many2one" tabindex="-1"><a class="header-anchor" href="#many2one" aria-hidden="true">#</a> Many2one</h3><p>多对一类型, 对应于数据库中的类型是 <code>int4</code>, 相当于数据库主表中的外键; 可选的参数如下:</p><ul><li><strong><code>comodel_name</code></strong>: 需要关联的目标模型的名称;</li><li><strong><code>domain</code></strong>: 过滤条件;</li><li><strong><code>context</code></strong>: 上下文;</li><li><strong><code>ondelete</code></strong>: 当关联记录被删除时的动作; 可选 <code>set null</code>(本字段设置为 null), <code>restrict</code>(严格控制, 只有先删除本字段才允许删除), <code>cascade</code>(级联删除本字段关联的所有记录)</li><li><strong><code>auto_join</code></strong>: 是否在搜索该字段时生成 JOIN, 默认为 False;</li><li><strong><code>delegate</code></strong>: 当设置为 True 时, 关联对象的所有字段将在本字段变得可用;</li><li><strong><code>check_company</code></strong>: 在 <code>_check_company</code> 中标记要验证的字段, 根据字段属性添加默认的公司域;</li></ul><h3 id="one2many" tabindex="-1"><a class="header-anchor" href="#one2many" aria-hidden="true">#</a> One2many</h3><p>一对多类型, 返回值是一个关联对象的集合. 接收的参数列表如下:</p><ul><li><strong><code>comodel_name</code></strong>: 关联的目标模型的名称;</li><li><strong><code>inverse_name</code></strong>: 在 <code>Many2one</code> 对象中的字段名, 默认为 <code>None</code>;</li><li><strong><code>domain</code></strong>: 过滤条件;</li><li><strong><code>context</code></strong>: 上下文;</li><li><strong><code>auto_join</code></strong>: 是否在搜索该字段时生成 JOIN, 默认为 False;</li></ul><h3 id="many2many" tabindex="-1"><a class="header-anchor" href="#many2many" aria-hidden="true">#</a> Many2many</h3><p>多对多关系类型的字段, <code>Many2many</code> 的命令字与 <code>One2many</code> 相同, 与 <code>One2many</code> 类型不同的是, <code>One2many</code> 要对关联对象有一个回溯本身对象的 <code>inverse_name</code> 字段, 而 <code>Many2many</code> 字段并无此限制;</p><ul><li><strong><code>comodel_name</code></strong>: 关联的目标模型的名称;</li><li><strong><code>relation</code></strong>: 关系表名, <code>Many2many</code> 关联的字段会自动生成一个中间表, 可以通过这个字段设置中间表的表名;</li><li><strong><code>column1</code></strong>: 本对象的关联字段名;</li><li><strong><code>column2</code></strong>: 关联对象的关联字段名;</li><li><strong><code>domain</code></strong>: 过滤条件;</li><li><strong><code>context</code></strong>: 上下文;</li><li><strong><code>check_company</code></strong>: 在 <code>_check_company</code> 中标记要验证的字段, 根据字段属性添加默认的公司域;</li></ul><p>Many2many 字段如果在未传入 <code>relation</code> 和 <code>column1</code>, <code>column2</code> 属性的时候, 会自动生成中间表名, 规则是 <code>&lt;modelName&gt;_&lt;relation_modelName&gt;_rel</code>; 如下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _name <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>
    _description <span class="token operator">=</span> <span class="token string">&#39;Book&#39;</span>
    
    <span class="token comment"># 作者</span>
    author_ids <span class="token operator">=</span> fields<span class="token punctuation">.</span>Many2many<span class="token punctuation">(</span><span class="token string">&#39;res.partner&#39;</span><span class="token punctuation">,</span> string<span class="token operator">=</span><span class="token string">&#39;Authors&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候自动生成的中间表名称为 <code>library_book_res_partner_rel</code>, <code>column1</code> 为 <code>library_book_id</code>, <code>column2</code> 为 <code>res_partner_id</code></p><h3 id="command" tabindex="-1"><a class="header-anchor" href="#command" aria-hidden="true">#</a> Command</h3><p>在 odoo 的 x2manny 字段的操作中, 对字段进行 CURD 操作比较特殊, odoo 15.x 之前, 是这样操作的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">{</span>values<span class="token punctuation">}</span><span class="token punctuation">)</span>  根据values里面的信息新建一个记录<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>ID<span class="token punctuation">,</span><span class="token punctuation">{</span>values<span class="token punctuation">}</span><span class="token punctuation">)</span> 更新<span class="token builtin">id</span><span class="token operator">=</span>ID的记录 <span class="token punctuation">(</span>写入values里面的数据<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>ID<span class="token punctuation">)</span>  删除<span class="token builtin">id</span><span class="token operator">=</span>ID的数据 <span class="token punctuation">(</span>调用 unlink 方法<span class="token punctuation">,</span> 删除数据以及整个主从数据链接关系<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>ID<span class="token punctuation">)</span>  切断主从数据的链接关系但是不删除这个数据<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>ID<span class="token punctuation">)</span> 为 <span class="token builtin">id</span><span class="token operator">=</span>ID 的数据添加主从链接关系<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  删除所有的从数据的链接关系就是向所有的从数据调用<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span>IDs<span class="token punctuation">]</span><span class="token punctuation">)</span> 用IDs里面的记录替换原来的记录<span class="token punctuation">,</span> 就是先执行<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>再执行循环IDs执行<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种硬编码的方法非常的不友好, 所以在 odoo 15.x 的版本中, 引入了 Command 类, 对上面的硬编码进行封装;</p><table><thead><tr><th>命令符</th><th>说明</th><th>举例</th><th>结构命令</th></tr></thead><tbody><tr><td>CREATE</td><td>根据 values 里面的值创建一条新的记录</td><td>Command.create({ &#39;name&#39;:&#39;Crash&#39; })</td><td>(0,0,{values})</td></tr><tr><td>UPDATE</td><td>根据 values 里面的值更新 id 对应的记录</td><td>Command.update(1, { &#39;name&#39;: &#39;joey&#39; })</td><td>(1,ID,{values})</td></tr><tr><td>DELETE</td><td>删除 id = ID 的这条记录</td><td>Command.delete(1)</td><td>(2,ID)</td></tr><tr><td>UNLINK</td><td>切断主从关系, 但不删除该条数据</td><td>Command.unlink(1)</td><td>(3,ID)</td></tr><tr><td>LINK</td><td>为 id = ID 的记录添加关联关系 (3, ID) 的反向操作</td><td>Command.link(1)</td><td>(4,ID)</td></tr><tr><td>CLEAR</td><td>删除所有主从关系, 等价于循环调用模型中的 unlink 方法</td><td>Command.clear()</td><td>(5,)</td></tr><tr><td>SET</td><td>用 IDS 中的记录替换原来的记录, 等价于先 clear 命令, 再循环调用 link 命令</td><td>Command.set([1,2,3])</td><td>(6,0,[IDs])</td></tr></tbody></table><p>例如: 我们创建的图书应用中, 可以对 x2many 字段进行如下操作:</p><p><strong>创建</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> odoo<span class="token punctuation">.</span>fields <span class="token keyword">import</span> Command

<span class="token comment"># 创建一本图书</span>
book <span class="token operator">=</span> self<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;book_store.book&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;巨人的陨落&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 为图书添加作者</span>
book<span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span>Command<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;肯*福莱特&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>更新</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>book<span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span>Command<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;肯·福莱特&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>book<span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span>Command<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>连接</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>author <span class="token operator">=</span> self<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;book_store.author&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;Kevin Kong&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
book<span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span>Command<span class="token punctuation">.</span>link<span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除链接</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>book<span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span>Command<span class="token punctuation">.</span>unlink<span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>清空</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>authors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;肯·福莱特&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Kevin Kong&quot;</span><span class="token punctuation">]</span>
book<span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span>Command<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>x<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> authors<span class="token punctuation">]</span>
book<span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span>Command<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>替换</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>book<span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span>Command<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>x<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> authors<span class="token punctuation">]</span>

a <span class="token operator">=</span> self<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;book_store.author&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;马腾&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> self<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;book_store.author&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;李迅&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> self<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;book_store.author&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;周杰&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
book<span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token punctuation">[</span>Command<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算字段" tabindex="-1"><a class="header-anchor" href="#计算字段" aria-hidden="true">#</a> 计算字段</h3><p>上面所提到的所有的字段类型, 都可以传入一个 <code>compute</code> 参数, 使其成为计算字段; 计算字段是不存储在数据库中的; (也可以通过 <code>store=True</code> 来设置存储)</p><p>基本用法:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span>compute<span class="token operator">=</span><span class="token string">&quot;_get_name&quot;</span><span class="token punctuation">,</span> string<span class="token operator">=</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">_get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Cindy&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果依赖其他字段的变化, 重新计算, 可以使用 <code>@api.depends()</code> 装饰器:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> odoo <span class="token keyword">import</span> api
total <span class="token operator">=</span> fields<span class="token punctuation">.</span>Float<span class="token punctuation">(</span>compute<span class="token operator">=</span><span class="token string">&#39;_compute_total&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 当税率变化的时候, 重新计算金额</span>
<span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>depends</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tax&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">_compute_total</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> record <span class="token keyword">in</span> self<span class="token punctuation">:</span>
        record<span class="token punctuation">.</span>total <span class="token operator">=</span> record<span class="token punctuation">.</span>value <span class="token operator">+</span> record<span class="token punctuation">.</span>value <span class="token operator">*</span> record<span class="token punctuation">.</span>tax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用关联字段的子字段进行依赖:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>depends</span><span class="token punctuation">(</span><span class="token string">&#39;line_ids.value&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">_compute_total</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> record <span class="token keyword">in</span> self<span class="token punctuation">:</span>
        record<span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>value <span class="token keyword">for</span> line <span class="token keyword">in</span> record<span class="token punctuation">.</span>line_ids<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下, 非存储值是不可以被搜索的; 如果想要搜索计算字段, 则需要使用 <code>search</code> 属性;</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>upper_name <span class="token operator">=</span> field<span class="token punctuation">.</span>Char<span class="token punctuation">(</span>compute<span class="token operator">=</span><span class="token string">&#39;_compute_upper&#39;</span><span class="token punctuation">,</span> search<span class="token operator">=</span><span class="token string">&#39;_search_upper&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">_search_upper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> operator<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> operator <span class="token operator">==</span> <span class="token string">&#39;like&#39;</span><span class="token punctuation">:</span>
        operator <span class="token operator">=</span> <span class="token string">&#39;ilike&#39;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> operator<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下, 计算字段为只读字段; 若要允许在计算字段上设置值, 可以使用方向参数; 它是反转计算, 并设置相关字段的函数的名称;</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>document <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span>compute<span class="token operator">=</span><span class="token string">&#39;_get_document&#39;</span><span class="token punctuation">,</span> inverse<span class="token operator">=</span><span class="token string">&#39;_set_document&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">_get_document</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> record <span class="token keyword">in</span> self<span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>get_document_path<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            record<span class="token punctuation">.</span>document <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
            
<span class="token keyword">def</span> <span class="token function">_set_document</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> record <span class="token keyword">in</span> self<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> record<span class="token punctuation">.</span>document<span class="token punctuation">:</span> <span class="token keyword">continue</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>get_document_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>record<span class="token punctuation">.</span>document<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过相同的方法同时计算多个字段, 只需对所有字段使用相同的方法并设置所有字段即可:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>discount_value <span class="token operator">=</span> fields<span class="token punctuation">.</span>Float<span class="token punctuation">(</span>compute<span class="token operator">=</span><span class="token string">&#39;_apply_discount&#39;</span><span class="token punctuation">)</span>
total <span class="token operator">=</span> fields<span class="token punctuation">.</span>Float<span class="token punctuation">(</span>compute<span class="token operator">=</span><span class="token string">&#39;_apply_discount&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>depends</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;discount&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">_apply_discount</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> record <span class="token keyword">in</span> self<span class="token punctuation">:</span>
        discount <span class="token operator">=</span> record<span class="token punctuation">.</span>value <span class="token operator">*</span> record<span class="token punctuation">.</span>discount
        record<span class="token punctuation">.</span>discount_value <span class="token operator">=</span> discount
        record<span class="token punctuation">.</span>total <span class="token operator">=</span> record<span class="token punctuation">.</span>value <span class="token operator">-</span> discount
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理字段" tabindex="-1"><a class="header-anchor" href="#代理字段" aria-hidden="true">#</a> 代理字段</h3><p>计算字段的一种特殊情况是代理字段, 它提供当前记录上子字段的值; 它是通过设置 <code>related</code> 参数来定义, 与常规计算字段一样, 它也可以设置 <code>store=True</code> 来进行存储;</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nickname <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span>related<span class="token operator">=</span><span class="token string">&#39;user_id.partner_id.name&#39;</span><span class="token punctuation">,</span> store<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不希望在任何依赖项更改时重新计算相关字段, 则可以指定精确的字段依赖项:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>nickname <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span>
    related<span class="token operator">=</span><span class="token string">&#39;partner_id.name&#39;</span><span class="token punctuation">,</span> store<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    depends<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;partner_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,126),p=[o];function c(l,i){return s(),a("div",null,p)}const r=n(e,[["render",c],["__file","基本字段.html.vue"]]);export{r as default};
