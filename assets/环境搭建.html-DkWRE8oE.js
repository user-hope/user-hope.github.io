import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-cr7GvDUH.js";const l="/images/odoo/S01/login.png",o="/images/odoo/S01/database-manager.png",d={};function t(h,s){return n(),e("div",null,[...s[0]||(s[0]=[a(`<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建"><span>环境搭建</span></a></h2><p>本章节将开始从 0 - 1 搭建一个 <code>odoo</code> 系统, 适用于对 <code>odoo</code> 没有经验的读者, 如果您对 <code>odoo</code> 已经有经验了, 可以跳过本章节;</p><h2 id="操作系统的选择" tabindex="-1"><a class="header-anchor" href="#操作系统的选择"><span>操作系统的选择</span></a></h2><p><code>Odoo</code> 的最佳操作系统推荐是 <code>Ubuntu</code>, 如果对 <code>Linux</code> 不熟悉, 也可以选择 <code>Windows</code> 进行安装, 只是 <code>Windows</code> 上只推荐做开发环境, 并不推荐部署生产环境.</p><h2 id="环境搭建-1" tabindex="-1"><a class="header-anchor" href="#环境搭建-1"><span>环境搭建</span></a></h2><p><code>Odoo</code> 的环境搭建方式多种多样, 按方式划分的话可以分为源码安装和安装包安装两种方式; 源码安装的方式相对比较繁琐, 适合于喜欢自己动手同学; 安装包安装的方式比较简洁, 适合于喜欢傻瓜式安装软件的同学; 两种方式没有优劣之分, 取决于你的心情. 下面简单介绍一下这两种安装方式</p><h3 id="源码安装" tabindex="-1"><a class="header-anchor" href="#源码安装"><span>源码安装</span></a></h3><blockquote><p>本文档以 odoo 16 为例, 介绍在 windows 环境下面的安装与启动方法;</p></blockquote><p>我们首先来看一下, 如何使用源码安装的方式进行安装; 源码安装的优势是, 所有的组件都是自己完成的, 相对的灵活可控, 不必拘泥于系统安装方式的束缚. 缺点是, 对用户的动手能力要求很高, 安装过程中会碰到各种各样的问题, 需要有很强的搜索和解决问题的能力;</p><h4 id="安装环境依赖" tabindex="-1"><a class="header-anchor" href="#安装环境依赖"><span>安装环境依赖</span></a></h4><p><code>Odoo12.0</code> 以后已经全面使用 <code>Python3</code> 作为后端的主要语言了, 因此, 需要先安装 <code>Python3</code>, 推荐3.6及以后的版本. 如果使用的是 <code>Ubuntu 18.04+</code> 的发行版本, 系统已经集成了 <code>Python3</code>;</p><ol><li>安装 <a href="https://www.python.org/downloads/" target="_blank" rel="noopener noreferrer">python3</a></li><li>安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer">Nodejs</a></li><li>安装 <a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads" target="_blank" rel="noopener noreferrer">postgresql</a> 推荐使用 14.x 及以上版本</li><li>安装 <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener noreferrer">pycharm</a></li></ol><h4 id="安装-odoo" tabindex="-1"><a class="header-anchor" href="#安装-odoo"><span>安装 odoo</span></a></h4><blockquote><p>如果是 windows 系统, 还需要额外安装 c++ 编译工具 <a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/" target="_blank" rel="noopener noreferrer">visual studio生成工具</a></p></blockquote><ol><li>使用 <code>git</code> 将 <code>odoo</code> 的源码克隆到本地, 注意选择你要安装的版本分支:</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/odoo/odoo.git</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 16.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --depth=1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># git fetch --unshallow 可以将浅克隆的仓库变成完全克隆</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>代码下载下来之后, 进入文件夹使用如下命令进行安装, 由于网络的原因, 很多插件自动安装不上, 需要手动安装, 这也是源码安装最为繁琐的地方;</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> setup.py</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>期间可能会遇到各种异常, 这时就需要使用搜索引擎依次解决. 这里列出常见的几个:</p><ul><li>安装 <code>psycopg2</code> 出错:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Setup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> script</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exited</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> error:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> command</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;x86_64-linux-gnu-gcc&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> failed</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>需要安装 <code>libpq-dev</code>, <code>apt install libpq-dev</code>;</p><p>如果终端中有提示 utf8 编码错误, 就需要在环境变量中添加几个变量:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> LC_ALL</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">en_US</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">UTF-8</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> LC_CTYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">en_US</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">UTF-8</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> LANG</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">en_US</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">UTF-8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ModuleNotFoundError: No module named &#39;werkzeug.contrib&#39;:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> werkzeug==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.16.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>ModuleNotFoundError: No module named &#39;win32service&#39;</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --upgrade</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pywin32</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后安装 <code>Python</code> 依赖: <code>pip3 install -r requirements.txt</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># or 镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> requirements.txt</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://pypi.tuna.tsinghua.edu.cn/simple</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># or 权限</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Ur</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> requirements.txt</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://pypi.tuna.tsinghua.edu.cn/simple</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>所有插件安装完成后, 即可使用如下的命令启动:</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> odoo-bin</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --addons-path=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./addons&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如上, odoo-bin 启动的时候, 可以传入很多启动参数, 下面是一些常见的参数:</p><ul><li><code>server(启动服务)</code>: <ul><li><strong><code>-d</code></strong>: 或者是 <code>--database</code>, 用于指定链接数据库的名称;</li><li><strong><code>-i</code></strong>: 或者是 <code>--init</code>, 用于指定服务器在运行之前要安装的模块 (依赖 <code>-d</code> 参数);</li><li><strong><code>-u</code></strong>: 或者是 <code>--update</code>, 用于指定服务器在运行之前需要更新的模块 (依赖 <code>-d</code> 参数);</li><li><strong><code>--addons-path</code></strong>: 指定 addons 模块存储的目录, 有多个可以用 <code>,</code> 隔开;</li><li><strong><code>-c</code></strong>: 或者是 <code>--config</code>, 用于指定配置文件的地址;</li><li><strong><code>-s</code></strong>: 或者是 <code>--save</code>, 将服务器配置保存到当前配置文件;</li><li><strong><code>--without-demo</code></strong>: 不使用 demo 的演示数据;</li><li><strong><code>--test-enable</code></strong>: 是否在模块安装之后执行 test;</li><li><strong><code>--test-tags</code></strong>: 用于运行 odoo 测试的时候指定要执行的测试标签;</li><li><strong><code>--screenshots</code></strong>: 指定 HttpCase.browser_js 测试失败时写入屏幕截图的目录;</li><li><strong><code>--screencasts</code></strong>: 启用截屏视频并指定写入截屏视频文件的目录, <code>ffmpeg</code> 需要安装该实用程序才能将帧编码为视频文件; 否则, 将保留帧而不是视频文件;</li></ul></li><li><code>database(数据库)</code>: <ul><li><strong><code>-r</code></strong>: 或者是 <code>--db_user</code>, 指定链接 <code>PostgreSQL</code> 的用户;</li><li><strong><code>-w</code></strong>: 或者是 <code>--db_password</code>, 指定链接 <code>PostgreSQL</code> 的密码;</li><li><strong><code>--db_host</code></strong>: 指定链接的数据库的启动地址;</li><li><strong><code>--db_port</code></strong>: 指定链接的数据库的启动端口号;</li><li><strong><code>--db-filter</code></strong>: 隐藏与 filter 不匹配的数据库, 过滤器是一个正则表达式;</li><li><strong><code>--db-template</code></strong>: 从数据库管理界面创建新数据库时, 使用指定的数据库模板;</li><li><strong><code>--pg_path</code></strong>: 数据库管理器用于恢复数据库的二进制文件路径;</li><li><strong><code>--no-database-list</code></strong>: 取消列出系统上可用数据库的功能;</li><li><strong><code>--db_sslmode</code></strong>: 控制 <code>Odoo</code> 和 <code>PostgreSQL</code> 之间连接的SSL安全性; 值为 <code>disable</code>, <code>allow</code>, <code>prefer</code>, <code>require</code>, <code>verify-ca</code>, <code>verify-full</code> 之一, 默认为 <code>prefer</code>;</li></ul></li><li><code>emails(电子邮件)</code>: <ul><li><strong><code>--email-from</code></strong>: odoo 发送邮件的时候用作电子邮件的 from 地址;</li><li><strong><code>--smtp</code></strong>: 发送邮件的 SMTP 服务器的地址;</li><li><strong><code>--smtp-port</code></strong>: smtp 服务器的端口号;</li><li><strong><code>--smtp-ssl</code></strong>: 如果设置了, odoo 就会使用 <code>SSL/STARTSSL</code> 链接 smtp;</li><li><strong><code>--smtp-user</code></strong>: smtp 服务器的用户名;</li><li><strong><code>--smtp-password</code></strong>: smtp 服务器的密码;</li></ul></li><li><code>Internationalisation(国际化)</code>: <ul><li><strong><code>--load-language</code></strong>: 指定需要加载的翻译语言, 如果有多个, 用 <code>,</code> 隔开;</li><li><strong><code>-l</code></strong>: 或者是 <code>--language</code>, 指定翻译文件的语言, 一般与 <code>-i18n</code> 导出或者是 <code>-i18n</code> 导入一起使用;</li><li><strong><code>--i18n-export</code></strong>: 将所有要翻译的句子导出到 <code>CSV</code> 文件, <code>PO</code> 文件或 <code>TGZ</code> 文件并退出;</li><li><strong><code>--i18n-import</code></strong>: 导入带有翻译的 <code>CSV</code> 或 <code>PO</code> 文件并退出;</li><li><strong><code>--i18n-overwrite</code></strong>: 在更新模块或导入 <code>CSV</code> 或 <code>PO</code> 文件时覆盖现有翻译术语;</li><li><strong><code>--modules</code></strong>: 指定要导出的模块, 与 <code>-i18n</code> 导出结合使用;</li></ul></li><li><code>Developer(开发者选项)</code><ul><li><strong><code>--dev</code></strong>: <ul><li><strong><code>all</code></strong>: 下面列出来的所有功能都激活;</li><li><strong><code>xml</code></strong>: 下次更新/启动之前从代码的 xml 里面读取 <code>qweb</code>, 而不是从数据库中读取;</li><li><strong><code>reload</code></strong>: 在更新 <code>python</code> 文件时重新启动服务器;</li><li><strong><code>qweb</code></strong>: 当遇到 <code>t-debug=&#39;debugger&#39;</code> 是终端 <code>qweb</code> 渲染;</li></ul></li></ul></li><li><code>http(http配置)</code>: <ul><li><strong><code>--no-http</code></strong>: 不要启动 <code>HTTP</code> 或长轮询工作程序;</li><li><strong><code>--http-interface</code></strong>: <code>HTTP</code> 服务器侦听的 <code>TCP/IP</code> 地址, 默认为 <code>0.0.0.0</code> (所有地址);</li><li><strong><code>--http-port</code></strong>: <code>http</code> 服务启动的端口号, 默认为 <code>8069</code>;</li><li><strong><code>--longpolling-port</code></strong>: 用于长轮询连接的TCP端口, 默认为 <code>8072</code>;</li><li><strong><code>--proxy-mode</code></strong>: 通过 <code>werkzeug</code> 模块的支持, 可以使用 <code>x-forwarded-*</code> 请求头;</li></ul></li><li><code>Logging(日志)</code>: <ul><li><strong><code>--logfile</code></strong>: 将日志记录输出发送到指定的文件, 而不是 <code>stdout</code> 终端;</li><li><strong><code>--syslog</code></strong>: 日志到系统的事件记录器;</li><li><strong><code>--log-db</code></strong>: 记录到指定数据库的 <code>ir.logging</code> 模型, 数据库可以是当前启动的 <code>postgresql</code> 中的数据库名称, 也可以是一个 <code>PostgreSQL URI</code>;</li><li><strong><code>--log-handler</code></strong>: 日志级别, 在提供的级别上启用 <code>logger</code>, 例如: <code>odoo.models.DEBUG</code>, 将在模型中启用DEBUG级别或以上的所有日志记录消息; <code>odoo-bin --log-handler :DEBUG --log-handler werkzeug:CRITICAL --log-handler odoo.fields:WARNING</code></li><li><strong><code>--log-request</code></strong>: 为 <code>RPC</code> 请求启用 <code>DEBUG</code> 日志记录, 相当于: <code>--log-handler=odoo.http.RPC.request:DEBUG</code>;</li><li><strong><code>--log-response</code></strong>: 为 <code>RPC</code> 返回值启用 <code>DEBUG</code> 日志记录, 相当于: <code>--log-handler=odoo.http.rpc.response:DEBUG</code>;</li><li><strong><code>--log-web</code></strong>: 启用 <code>HTTP</code> 请求和响应的 <code>DEBUG</code> 日志记录, 相当于: <code>--log-handler=odoo.http:DEBUG</code>;</li><li><strong><code>--log-sql</code></strong>: 启用 <code>SQL</code> 查询的 <code>DEBUG</code> 日志记录, 相当于: <code>--log-handler=odoo.sql_db:DEBUG</code>;</li><li><strong><code>--log-level</code></strong>: 在特定记录器上设置预定义级别的快捷方式;</li><li><strong><code>debug_sql</code></strong>: 设置 <code>SQL</code> 查询的 <code>DEBUG</code> 日志, 相当于: <code>--log-sql</code>;</li><li><strong><code>debug_rpc</code></strong>: 设置 <code>RPC</code> 请求的 <code>DEBUG</code> 日志, 相当于: <code>--log-level debug --log-request</code>;</li><li><strong><code>debug_rpc_answer</code></strong>: 设置 <code>HTTP</code> 请求的 <code>DEBUG</code> 日志, 相当于: <code>--log-level debug --log-request --log-response</code>;</li></ul></li><li><code>Multiprocessing(多处理器)</code>: <ul><li><strong><code>--workers</code></strong>: 如果 count 不为 0, 则启用多处理器并设置指定数量的 http workers;</li><li><strong><code>--limit-request</code></strong>: 工作进程在回收和重新启动之前将处理的请求数;</li><li><strong><code>--limit-memory-soft</code></strong>: 每个工作进程允许的最大虚拟内存(字节), 如果超过了限制, 则在当前请求结束时终止并回收; 默认是 <code>2048M</code>;</li><li><strong><code>--limit-memory-hard</code></strong>: 虚拟内存的硬限制(字节), 任何超过限制的工作进程都会被杀死, 而无需等待当前请求处理结束; 默认是 <code>2560M</code></li><li><strong><code>--limit-time-cpu</code></strong>: 防止工作进程在每次请求中使用超过 limit (cpu) 的时间, 如果超过限制, worker 会挂掉;</li></ul></li></ul><p>example:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -c 指定配置文件地址</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -d 指定数据库名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -u 指定启动服务之前需要升级的模块名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --modules 指定需要导出的模块</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --i18n-export 指定导出文件的地址</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 这行命令的作用就是将 library 模块升级, 并且导出 zh_CN 的翻译文件到 translation 目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> odoo-bin</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> D:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\w</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">orkspace</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">doo16</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">doo.conf</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> odoo_test</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> library</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --modules=library</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --i18n-export=./translation/zh_CN.po</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中, 命令行传入了很多参数, 然而在实际项目里面, 每一个参数都需要这么写那就比较麻烦了, 而且还容易出错, 因此, 我们可以使用配置文件的方式来将配置参数统一处理;</p><blockquote><p>可以执行 python odoo-bin -h 来查看所有的配置参数</p></blockquote><h3 id="配置文件介绍" tabindex="-1"><a class="header-anchor" href="#配置文件介绍"><span>配置文件介绍</span></a></h3><p>大多数参数都可以使用配置文件的方式指定, 多数情况下, 它们使用类似的名称, 只是把 <code>--</code> 前缀删除, <code>-</code> 替换成 <code>_</code>, 例如: <code>db-template</code> 变成 <code>db_template</code>;</p><p>配置文件通常位于 <code>odoo16/</code> 目录下名为 <code>odoo.conf</code> 的文件(如果没有, 可以手动创建一个), 当然, 我们也可以在启动的时候指定配置文件的路径; 配置文件中包含若干个关于 odoo 的配置信息, 一个典型的配置文件内容如下:</p><div class="language-conf line-numbers-mode" data-highlighter="shiki" data-ext="conf" data-title="conf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[options]</span></span>
<span class="line"><span>addons_path = D:\\workspace\\odoo-16.0\\odoo\\addons,D:\\workspace\\odoo-16.0\\addons</span></span>
<span class="line"><span>admin_passwd = 123</span></span>
<span class="line"><span>csv_internal_sep = ,</span></span>
<span class="line"><span>db_host = localhost</span></span>
<span class="line"><span>db_name = odoo_16_test_20231127</span></span>
<span class="line"><span>db_user = root</span></span>
<span class="line"><span>db_password = root</span></span>
<span class="line"><span>db_maxconn = 64</span></span>
<span class="line"><span>db_port = False</span></span>
<span class="line"><span>db_sslmode = prefer</span></span>
<span class="line"><span>email_from = False</span></span>
<span class="line"><span>enable_redis = False</span></span>
<span class="line"><span>from_filter = False</span></span>
<span class="line"><span>geoip_database = C:\\usr\\share\\GeoIP\\GeoLite2-City.mmdb</span></span>
<span class="line"><span>http_enable = True</span></span>
<span class="line"><span>http_interface =</span></span>
<span class="line"><span>http_port = 8091</span></span>
<span class="line"><span>import_partial =</span></span>
<span class="line"><span>limit_memory_hard = 2684354560</span></span>
<span class="line"><span>limit_memory_soft = 2147483648</span></span>
<span class="line"><span>limit_request = 8192</span></span>
<span class="line"><span>limit_time_cpu = None</span></span>
<span class="line"><span>limit_time_real = None</span></span>
<span class="line"><span>limit_time_real_cron = -1</span></span>
<span class="line"><span>list_db = True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成之后就可以使用指定配置来启动服务了:</p><blockquote><p>完整的配置, 可以查看 <code>odoo/tools/config.py</code> 下的配置内容;</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> odoo-bin</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /odoo.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如上, 我们指定的 <code>http_port</code> 的端口为 <code>8091</code>, 运行启动命令之后, 在浏览器访问 <code>http://localhost:8091</code> 就可以看到以下界面;</p><figure><img src="`+l+'" alt="login" tabindex="0" loading="lazy"><figcaption>login</figcaption></figure><p>初始化的用户是 <code>admin</code>, 密码也是 <code>admin</code>;</p><h3 id="数据库管理" tabindex="-1"><a class="header-anchor" href="#数据库管理"><span>数据库管理</span></a></h3><p>上面的配置文件中, 我们指定了 <code>db_name</code> 为 <code>odoo_16_test_20231127</code>, odoo 在启动的时候就会去链接这个数据库, 如果不存在, 则会新建一个;</p><p>我们还可以通过 web 端提供的数据库管理工具进行数据库管理;</p><p>服务启动后访问 <code>http://localhost:8091/web/database/manager</code>, 会出现下面的界面, 可以在这里对数据库进行管理操作, 包括创建, 备份和删除; 数据库管理是一个比较敏感的操作, 如果对外服务的话, 记得在配置文件中设置密码管理, 以防止数据丢失;</p><figure><img src="'+o+`" alt="database-manager" tabindex="0" loading="lazy"><figcaption>database-manager</figcaption></figure><p>当然, 数据库的管理也可以在 <code>postgresql</code> 中进行, 但是需要注意的是, 创建的数据库的 owner 需要是 odoo 连接数据库的那个用户;</p><h3 id="开发工具" tabindex="-1"><a class="header-anchor" href="#开发工具"><span>开发工具</span></a></h3><p>推荐使用 vscode, 或者是 pycharm, 这里就不多做介绍;</p><h3 id="vscode-断点调试" tabindex="-1"><a class="header-anchor" href="#vscode-断点调试"><span>vscode 断点调试</span></a></h3><p><code>vscode</code> 里面如果需要使用断点调试, 需要新建 <code>.vscode/launch.json</code>, 内容如下:</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.2.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;configurations&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Odoo: debug&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;python&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;request&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;launch&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;stopOnEntry&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;program&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;D:/workspace/odoo-16.0/odoo-bin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;python&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${command:python.interpreterPath}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;cwd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${workspaceFolder}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;env&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {},</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;args&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                &quot;-c&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                &quot;D:/workspace/odoo-16.0/odoo.conf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                &quot;--dev=all&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,59)])])}const c=i(d,[["render",t]]),k=JSON.parse('{"path":"/pages/web-server/odoo/section-01/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","title":"","lang":"zh-CN","frontmatter":{"headerDepth":3,"prev":{"link":"/pages/web-server/odoo/"},"next":{"link":"/pages/web-server/odoo/section-01/第一个模块.md"},"description":"环境搭建 本章节将开始从 0 - 1 搭建一个 odoo 系统, 适用于对 odoo 没有经验的读者, 如果您对 odoo 已经有经验了, 可以跳过本章节; 操作系统的选择 Odoo 的最佳操作系统推荐是 Ubuntu, 如果对 Linux 不熟悉, 也可以选择 Windows 进行安装, 只是 Windows 上只推荐做开发环境, 并不推荐部署生产环...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/user-hope/user-hope.github.io/pages/web-server/odoo/section-01/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:description","content":"环境搭建 本章节将开始从 0 - 1 搭建一个 odoo 系统, 适用于对 odoo 没有经验的读者, 如果您对 odoo 已经有经验了, 可以跳过本章节; 操作系统的选择 Odoo 的最佳操作系统推荐是 Ubuntu, 如果对 Linux 不熟悉, 也可以选择 Windows 进行安装, 只是 Windows 上只推荐做开发环境, 并不推荐部署生产环..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/user-hope/user-hope.github.io/images/odoo/S01/login.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://github.com/user-hope/user-hope.github.io/images/odoo/S01/login.png\\",\\"https://github.com/user-hope/user-hope.github.io/images/odoo/S01/database-manager.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://github.com/user-hope/user-hope.github.io\\"}]}"]]},"headers":[{"level":2,"title":"环境搭建","slug":"环境搭建","link":"#环境搭建","children":[]},{"level":2,"title":"操作系统的选择","slug":"操作系统的选择","link":"#操作系统的选择","children":[]},{"level":2,"title":"环境搭建","slug":"环境搭建-1","link":"#环境搭建-1","children":[{"level":3,"title":"源码安装","slug":"源码安装","link":"#源码安装","children":[]},{"level":3,"title":"配置文件介绍","slug":"配置文件介绍","link":"#配置文件介绍","children":[]},{"level":3,"title":"数据库管理","slug":"数据库管理","link":"#数据库管理","children":[]},{"level":3,"title":"开发工具","slug":"开发工具","link":"#开发工具","children":[]},{"level":3,"title":"vscode 断点调试","slug":"vscode-断点调试","link":"#vscode-断点调试","children":[]}]}],"readingTime":{"minutes":9.82,"words":2947},"filePathRelative":"pages/web-server/odoo/section-01/环境搭建.md","autoDesc":true,"excerpt":"<h2>环境搭建</h2>\\n<p>本章节将开始从 0 - 1 搭建一个 <code>odoo</code> 系统, 适用于对 <code>odoo</code> 没有经验的读者, 如果您对 <code>odoo</code> 已经有经验了, 可以跳过本章节;</p>\\n<h2>操作系统的选择</h2>\\n<p><code>Odoo</code> 的最佳操作系统推荐是 <code>Ubuntu</code>, 如果对 <code>Linux</code> 不熟悉, 也可以选择 <code>Windows</code> 进行安装, 只是 <code>Windows</code> 上只推荐做开发环境, 并不推荐部署生产环境.</p>"}');export{c as comp,k as data};
