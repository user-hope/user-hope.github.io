import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-CFhXzTaW.js";const l={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h2 id="模型" tabindex="-1"><a class="header-anchor" href="#模型"><span>模型</span></a></h2><p>与 python 的其他主流框架类似, odoo 的模型也是数据持久化的主要对象, 它是将数据库字段映射成 python 对象, 方便我们对数据进行处理;</p><p>odoo 的模型有下面这些特点:</p><ul><li>支持对层级结构的数据处理;</li><li>确保约束一执行和验证数据有效性;</li><li>对象的元数据根据其状态动态变化;</li><li>通过复杂查询实现优化的数据处理 (可以同时执行多个操作);</li><li>支持默认字段数值;</li><li>优化权限管理;</li><li>支持与持久化数据库 <code>PostgreSQL</code> 的数据交互;</li><li>数据转换功能;</li><li>多层级缓存系统;</li><li>支持多种不同的继承机制;</li><li>丰富的字段类型: 基础字段( varchar, integer, boolean... ), 关系型字段 (one2many, many2one, many2many);</li></ul><h2 id="模型的种类" tabindex="-1"><a class="header-anchor" href="#模型的种类"><span>模型的种类</span></a></h2><p>odoo 的模型可以分为一下三种类型:</p><ul><li><strong><code>BaseModel</code></strong>: odoo 模型的基类, 所有的模型都是继承自这个类别(不算做模型种类);</li><li><strong><code>AbstractModel</code></strong>: 抽象模型, 用于要由多个继承模型共享的抽象超类;</li><li><strong><code>Model</code></strong>: 数据模型, 常规数据库持久化模型;</li><li><strong><code>TransientModel</code></strong>: 瞬态模型, 用于临时数据, 存储在数据库中, 但每隔一段时间就会自动清空;</li></ul><h2 id="基础属性" tabindex="-1"><a class="header-anchor" href="#基础属性"><span>基础属性</span></a></h2><p>基础模型包含了一些技术性的参数:</p><ul><li><strong><code>_register</code></strong>: 是否注册, 不注册将在 ORM 中不可用; eg: <code>_register = False</code>;</li><li><strong><code>_auto</code></strong>: 是否应该创建数据表, 如果设置为 False, 需要重新 <code>init()</code> 函数来创建数据表; 对于 <code>Model</code> 和 <code>TransientModel</code>, 自动默认为 <code>True</code>, 对于 <code>AbstractModel</code>, 默认为 <code>False</code>;</li><li><strong><code>_log_access</code></strong>: ORM 是否应自动生成和更新访问日志字段;</li><li><strong><code>_table</code></strong>: 指定数据库中的表名;</li><li><strong><code>_sql_constraints</code></strong>: sql 的约束, 元组 <code>list</code>; eg: <code>[(name, sql_def, message)]</code></li><li><strong><code>_abstract</code></strong>: 是否是抽象模型;</li><li><strong><code>_transient</code></strong>: 是否是瞬态模型;</li><li><strong><code>_name</code></strong>: 模型的名称, 用 <code>.</code> 表示; eg: <code>library.book</code>;</li><li><strong><code>_description</code></strong>: 模型的描述信息;</li><li><strong><code>_inherit</code></strong>: 模型的继承; 如果设置了 <code>_name</code>, 则为要继承的父模型的名称; 如果未设置 <code>_name</code>, 则为扩展 <code>inherit</code> 说标识的模型; (这个比较复杂, 后面会独立展开讨论)</li><li><strong><code>_inherits</code></strong>: 将父业务对象的名称映射到要使用的相应外键字段的名称;</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BaseModel</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">models</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Model</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;base.model&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fields.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomModel</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">models</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Model</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;custom.model&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _inherits </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;base.model&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;base_model_id&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    base_model_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fields.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Many2one</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;base.model&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Base Model&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">required</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ondelete</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;cascade&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    custom_field </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fields.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Custom Field&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>_rec_name</code></strong>: 用于指定显示在 <code>Many2one</code> 类型的搜索中的显示字段, 可以简单的理解为该模型的记录集的名称; 默认情况下, <code>_rec_name</code> 的取值为 <code>name</code> 字段;</li><li><strong><code>_order</code></strong>: 排序字段, 默认为 <code>id</code>;</li><li><strong><code>_check_company_auto</code></strong>: 如果设置为 True, 在 <code>write</code>/<code>create</code> 记录的时候, 会调用 <code>_check_company</code> 方法来校验数据的一致性(多公司下非常有用);</li><li><strong><code>_parent_name</code></strong>: 用于存储树形数据时候的关联字段; 默认为 <code>parent_id</code>;</li><li><strong><code>_parent_store</code></strong>: 默认是 False, 设置为 True 的时候会计算 <code>parent_path</code>; 除了 <code>parent_path</code> 字段外, 还设置了记录树结构的索引存储; 以便使用运算符 <code>child_of</code> 和 <code>parent_of</code> 对当前模型的记录进行更快地分层查询;</li><li><strong><code>_fold_name</code></strong>: 用于确定看板视图中折叠组的字段; 默认为 <code>fold</code>;</li><li><strong><code>_date_name</code></strong>: 用于确定在日历视图中使用的字段; 默认为 <code>date</code>;</li><li><strong><code>_rec_names_search</code></strong>: 在 <code>name_search</code> 方法中可以搜索的字段列表;</li></ul><h2 id="abstractmodel" tabindex="-1"><a class="header-anchor" href="#abstractmodel"><span>AbstractModel</span></a></h2><p>抽象模型实际上是基础模型 (BaseModel) 的别称, 不创建数据库表. 抽象模型是数据模型的父类, 数据模型又是瞬态模型的父类, 因此, 抽象模型实际上是所有模型的父类;</p><p><code>BaseModel</code> 是元(<a href="https://github.com/jellyfrank/odoo/blob/16.0/odoo/models.py#L136" target="_blank" rel="noopener noreferrer">MetaModel</a>)模型的子类; 元模型的主要用途就是检查模块是否已经注册, 没有注册的话则注册模块;</p><p>抽象模型不存储数据, 可以作为重用的功能集, 任何继承了抽象模型的模型类, 都可以享用抽象模型里面提供的方法; 例如: <code>mail.thread</code> 可以混入到很多模型里面使用;</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> odoo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> models</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Http</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">models</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AbstractModel</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _inherit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;ir.http&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> session_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        res </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Http, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">session_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.env.user.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">_is_internal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            res[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;odoobot_initialized&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.env.user.odoobot_state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">not</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;not_initialized&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> res</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="model" tabindex="-1"><a class="header-anchor" href="#model"><span>Model</span></a></h2><p>常规数据持久化 odoo 模型的主类; 每个类的实例都是一个有序的记录集合( RecordSet );</p><p>默认情况下, odoo 将会为每个数据模型实例化一次; 如果希望创建一个不被实例化的类, 可以把 <code>_register</code> 属性设置为 <code>False</code>;</p><p><code>Model</code> 的子类在实例化的过程中都会自动创建数据库表, 如果不希望自动创建数据表, 可以将类的 <code>_auto</code> 属性设置为 <code>False</code>;</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> odoo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> models, fields</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ResPartner</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">models</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Model</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _inherit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;res.partner&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 继承 res.partner 模型, 并添加一个 property_payment_method_id Many2one 类型的字段;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    property_payment_method_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fields.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Many2one</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">        comodel_name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;account.payment.method&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">        string</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Payment Method&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">        company_dependent</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">        domain</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[(&#39;payment_type&#39;, &#39;=&#39;, &#39;outbound&#39;)]&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="transientmodel" tabindex="-1"><a class="header-anchor" href="#transientmodel"><span>TransientModel</span></a></h2><p>瞬态模型是指一种临时对象, 它的数据将被系统定期清理, 因此这就决定了它的使用场景不可以作为数据的持久化使用, 只能作为临时对象使用; 在 odoo 中, 瞬态模型最常被使用的一种场景是作为向导;</p><p>向导是 odoo 中常见的一种操作引导方式, 该方式通常由一个弹出式的窗体和字段、按钮组成; 用户通过向导可以选择指定特定的字段值, 然后进行下一步的操作.</p><p>向导背后的技术即用到了瞬态模型, 作为一种临时性的数据存储方案, 向导的数据不会长期留存在数据库中, 会由系统定期进行清理;</p><p><code>TransientModel</code> 具有简化的访问权限管理, 所有用户都可以创建新记录, 并且只能访问他们创建的记录; <code>TransientModel</code> 具有简化的访问权限管理, 所有用户都可以创建新记录, 并且只能访问他们创建的记录;</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> odoo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> models, fields</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PortalWizardUser</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">models</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TransientModel</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;portal.wizard.user&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _description </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Portal User Config&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 下面这些字段不会记录在数据库中, 使用完成之后会定期清理掉</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    wizard_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fields.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Many2one</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;portal.wizard&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Wizard&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">required</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ondelete</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;cascade&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    partner_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fields.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Many2one</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;res.partner&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Contact&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">required</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">readonly</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ondelete</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;cascade&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    email </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fields.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Email&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>瞬态模型有几个差异的属性:</p><ul><li><strong><code>_transient_max_count</code></strong>: 默认为 0; 瞬态记录的最大数量, 如果为 0 则不受限制;</li><li><strong><code>_transient_max_hours</code></strong>: 默认为 1.0; 最大空闲时间;</li><li><strong><code>_transient_vacuum()</code></strong>: 清理瞬态模型的记录;</li></ul>`,30)]))}const p=s(l,[["render",t],["__file","模型.html.vue"]]),r=JSON.parse('{"path":"/pages/web-server/odoo/section-01/%E6%A8%A1%E5%9E%8B.html","title":"","lang":"zh-CN","frontmatter":{"headerDepth":3,"prev":{"link":"/pages/web-server/odoo/section-01/API.md"},"next":{"link":"/pages/web-server/odoo/section-01/数据文件.md"},"description":"模型 与 python 的其他主流框架类似, odoo 的模型也是数据持久化的主要对象, 它是将数据库字段映射成 python 对象, 方便我们对数据进行处理; odoo 的模型有下面这些特点: 支持对层级结构的数据处理; 确保约束一执行和验证数据有效性; 对象的元数据根据其状态动态变化; 通过复杂查询实现优化的数据处理 (可以同时执行多个操作); 支...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/user-hope/user-hope.github.io/pages/web-server/odoo/section-01/%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:description","content":"模型 与 python 的其他主流框架类似, odoo 的模型也是数据持久化的主要对象, 它是将数据库字段映射成 python 对象, 方便我们对数据进行处理; odoo 的模型有下面这些特点: 支持对层级结构的数据处理; 确保约束一执行和验证数据有效性; 对象的元数据根据其状态动态变化; 通过复杂查询实现优化的数据处理 (可以同时执行多个操作); 支..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://github.com/user-hope/user-hope.github.io\\"}]}"]]},"headers":[{"level":2,"title":"模型","slug":"模型","link":"#模型","children":[]},{"level":2,"title":"模型的种类","slug":"模型的种类","link":"#模型的种类","children":[]},{"level":2,"title":"基础属性","slug":"基础属性","link":"#基础属性","children":[]},{"level":2,"title":"AbstractModel","slug":"abstractmodel","link":"#abstractmodel","children":[]},{"level":2,"title":"Model","slug":"model","link":"#model","children":[]},{"level":2,"title":"TransientModel","slug":"transientmodel","link":"#transientmodel","children":[]}],"readingTime":{"minutes":5.39,"words":1616},"filePathRelative":"pages/web-server/odoo/section-01/模型.md","autoDesc":true,"excerpt":"<h2>模型</h2>\\n<p>与 python 的其他主流框架类似, odoo 的模型也是数据持久化的主要对象, 它是将数据库字段映射成 python 对象, 方便我们对数据进行处理;</p>\\n<p>odoo 的模型有下面这些特点:</p>\\n<ul>\\n<li>支持对层级结构的数据处理;</li>\\n<li>确保约束一执行和验证数据有效性;</li>\\n<li>对象的元数据根据其状态动态变化;</li>\\n<li>通过复杂查询实现优化的数据处理 (可以同时执行多个操作);</li>\\n<li>支持默认字段数值;</li>\\n<li>优化权限管理;</li>\\n<li>支持与持久化数据库 <code>PostgreSQL</code> 的数据交互;</li>\\n<li>数据转换功能;</li>\\n<li>多层级缓存系统;</li>\\n<li>支持多种不同的继承机制;</li>\\n<li>丰富的字段类型: 基础字段( varchar, integer, boolean... ), 关系型字段 (one2many, many2one, many2many);</li>\\n</ul>"}');export{p as comp,r as data};
