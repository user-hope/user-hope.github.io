import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-9b0cd270.js";const t="/images/odoo/S22/effect.png",o="/images/odoo/S22/sepia.png",c={},p=e(`<h2 id="registries" tabindex="-1"><a class="header-anchor" href="#registries" aria-hidden="true">#</a> Registries</h2><p><code>registry</code> 是有序的键值对映射, 它们是主要的 web 客户端的扩展函数, odoo JavaScript 框架提供的许多功能只需要在某个对象的定义时查找 <code>registry</code>; 例如: <code>fields</code>, <code>views</code>, <code>client</code>, <code>action</code> 或是 <code>services</code>; 通过 <code>registry</code> 可以很轻松的对这些字段或者是视图进行扩展;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Registry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@web/core/registry&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Registry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

myRegistry<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;odoo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myRegistry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>registry</code> 的一个很有用的功能是它维护一组通过类别方法获得子 <code>registry</code> 的方法, 如果不存在, 则会即时创建; web 客户端使用的所有的 <code>registry</code> 方法都可以从一个根方法里面获取;</p><p>源代码: <code>addons/web/static/src/core/registry.js</code>, 引入方式: <code>@web/core/registry</code>;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> registry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@web/core/registry&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fieldRegistry <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token string">&quot;fields&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> serviceRegistry <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token string">&quot;services&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> viewRegistry <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token string">&quot;views&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="registry-api" tabindex="-1"><a class="header-anchor" href="#registry-api" aria-hidden="true">#</a> Registry API</h2><p>创建一个新的 <code>registry</code>, 请注意 <code>registry</code> 是一个全局的 <code>event bus</code>, 因此如果有必要, 可以使用 <code>UPDATE</code> 事件来监听变化; <code>registry</code> 的排序是由 <code>getAll</code> 方法返回的根据 <code>sequence</code> 的编号排序的;</p><ul><li><p><strong><code>Registry.add(key, value[, options])</code></strong>: 返回一个新的 <code>Registry</code>; 其中:</p><ul><li><strong><code>key</code></strong>: string, 标识;</li><li><strong><code>value</code></strong>: any, 值;</li><li><strong><code>options</code></strong>: object, <ul><li><strong><code>force</code></strong>: boolean, 如果 key 存在的时候是否 throw error;</li><li><strong><code>sequence</code></strong>: number, sequence 用来排序的值;</li></ul></li></ul></li><li><p><strong><code>Registry.get(key[, defaultValue])</code></strong>: 返回参数对应的值, 如果 <code>registry</code> 不包含该 <code>key</code>, 则此方法返回 <code>defaultValue</code>, 否则抛出错误;</p><ul><li><strong><code>key</code></strong>: string, 标识;</li><li><strong><code>any</code></strong>: any, 如果 key 没有获取到的默认值;</li></ul></li><li><p><strong><code>Registry.contains(key)</code></strong>: 返回值为 boolean, 表示 key 有没有在注册表里面注册过;</p><ul><li><strong><code>key</code></strong>: string, 标识;</li></ul></li><li><p><strong><code>Registry.getAll()</code></strong>: 返回注册表中所有的元素的列表, 它是按照 <code>sequence</code> 排序的;</p></li><li><p><strong><code>Registry.remove(key)</code></strong>: 从注册表中删除 键/值 对, 此操作会触发 <code>UPDATE</code> 事件;</p></li><li><p><strong><code>Registry.category(subcategory)</code></strong>: 返回与之类比关联的子注册表, 如果尚不存在, 则会动态的创建子注册表;</p></li></ul><h2 id="子注册表参考列表" tabindex="-1"><a class="header-anchor" href="#子注册表参考列表" aria-hidden="true">#</a> 子注册表参考列表</h2><table><thead><tr><th>类别</th><th>说明</th></tr></thead><tbody><tr><td><code>effects</code></td><td>实现所有可用的效果</td></tr><tr><td><code>formatters</code></td><td>用于格式化值的实用函数(主要是字段值)</td></tr><tr><td><code>main_components</code></td><td>顶级组件</td></tr><tr><td><code>parsers</code></td><td>用于解析值的实用函数(主要是字段值)</td></tr><tr><td><code>services</code></td><td>所有激活的 service 服务</td></tr><tr><td><code>systray</code></td><td>显示在导航栏系统托盘区域中的组件</td></tr><tr><td><code>user_menuitems</code></td><td>用户菜单中显示的菜单项 (导航栏右上角)</td></tr></tbody></table><h3 id="effect-registry" tabindex="-1"><a class="header-anchor" href="#effect-registry" aria-hidden="true">#</a> Effect registry</h3><p><code>effects registry</code> 包含所有的可用效果的实现, 更多详细信息请参考 <a href="">Effect Service</a></p><p><code>effects</code> 是可以临时显示在页面顶图的图形元素, 通常是为了向用户提供发生了有趣的事情的反馈, 例如: crm 里面的阶段变更为 &quot;赢得&quot; 的时候, 会出现一个有趣的彩虹动画;</p><p><img src="`+t+`" alt="effect"></p><p>下面我们来看一下这个动画效果的实现方式:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> effectService <span class="token operator">=</span> <span class="token function">useService</span><span class="token punctuation">(</span><span class="token string">&quot;effect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
effectService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;rainbow_man&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 可以省略, 默认类型就是 rainbow_man</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Boom! Team record for the past 30 days.&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rainbow_man</code> 是官方实现的一个效果, 也是目前唯一可用的 <code>effects</code>, 它的使用也是非常简单的, 只需要调用 <code>effectService.add({ type: &quot;rainbow_man&quot; });</code>, 它还允许以下参数来进行配置:</p><ul><li><strong><code>Component</code></strong>: 类型是一个 owl 的 Component, 允许替换 <code>RainbowMan</code> 组件实例化的 owl 模板;</li><li><strong><code>props</code></strong>: 如果给定了 <code>Component</code> 参数, props 将作为参数传入 <code>Component</code>;</li><li><strong><code>message</code></strong>: string 类型, 如果用户禁用了 <code>effect</code>, 则不会显示中间的 svg 效果, 只会显示 message 字符;</li><li><strong><code>messageIsHtml</code></strong>: boolean, 如果设置为 true, 那么 message 将会被当作 html 插入到 dom 中;</li><li><strong><code>img_url</code></strong>: 图片的 url, 默认为 <code>/web/static/img/smile.svg</code>;</li><li><strong><code>fadeout</code></strong>: 展示 <code>effects</code> 的动画效果; 可选: <code>&quot;slow&quot;|&quot;medium&quot;|&quot;fast&quot;|&quot;no&quot;</code> , 默认 <code>medium</code>;</li></ul><h4 id="定义一个-effect" tabindex="-1"><a class="header-anchor" href="#定义一个-effect" aria-hidden="true">#</a> 定义一个 Effect</h4><p>所有的 <code>effect</code> 都被存储在 <code>effects</code> 注册表中, 我们可以通过提供名称和函数来添加新的 <code>effect</code>;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** <span class="token keyword">@odoo-module</span> **/</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> registry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@web/core/registry&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> xml <span class="token punctuation">}</span> <span class="token operator">=</span> owl<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SepiaEffect</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> template <span class="token operator">=</span> xml<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        &lt;div style=&quot;
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            background: rgba(124,87,0, 0.4);
        &quot;&gt;&lt;/div&gt;
    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sepiaEffectProvider</span><span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">Component</span><span class="token operator">:</span> SepiaEffect<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> effectRegistry <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token string">&quot;effects&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
effectRegistry<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;sepia&quot;</span><span class="token punctuation">,</span> sepiaEffectProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如上面我们定义了一个名为 <code>sepia</code> 的 <code>effect</code>, 然后可以在任意地方调用它;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> effectService <span class="token operator">=</span> <span class="token function">useService</span><span class="token punctuation">(</span><span class="token string">&quot;effect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
effectService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;sepia&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="在-python-函数里面调用" tabindex="-1"><a class="header-anchor" href="#在-python-函数里面调用" aria-hidden="true">#</a> 在 python 函数里面调用</h4><p>使用 <code>effect</code> 注册的 <code>effects</code> 不仅可以在 js 里面调用, 还可以在 python 的函数中调用: 例如在页面中有一个按钮如下:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button_show_effect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button_show_effect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>object<span class="token punctuation">&quot;</span></span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Effect<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>点击按钮的时候调用 <code>sepia</code> 这个注册的效果:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">button_show_effect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;effect&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;message&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;这是测试用的 Effect&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;sepia&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们点击按钮的时候, 页面就会出现定义好的 <code>sepia</code>:</p><p><img src="`+o+`" alt="sepia"></p><p>官方提供的 <code>rainbow_man</code> 也可以通过这种方式调用:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">button_show_effect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;effect&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;fadeout&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;slow&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;message&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;这是测试用的 Effect&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;img_url&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;/web/static/img/smile.svg&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rainbow_man&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rainbow-man-实现" tabindex="-1"><a class="header-anchor" href="#rainbow-man-实现" aria-hidden="true">#</a> rainbow_man 实现</h4>`,34),i=[p];function l(r,d){return s(),a("div",null,i)}const v=n(c,[["render",l],["__file","Registries.html.vue"]]);export{v as default};
