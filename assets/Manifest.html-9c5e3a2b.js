import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as n,c as t,a as o,b as e,d as s,w as i,e as r}from"./app-9b0cd270.js";const l="/images/odoo/S09/category.png",p={},h=o("h2",{id:"module-manifests",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#module-manifests","aria-hidden":"true"},"#"),e(" Module Manifests")],-1),u=o("code",null,"manifest",-1),m=o("code",null,"manifest",-1),b=r('<p><code>manifest</code> 的内容是一个 python 的 <code>dict</code>, 每一个 <code>key</code> 都指定对应的元数据, 下面来看一下一个完整的 <code>manifest</code> 所包含的内容;</p><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><p><code>str</code> 类型, 必填; 标识为模块的名称; 用于在 <code>apps</code> 里面展示;</p><h3 id="version" tabindex="-1"><a class="header-anchor" href="#version" aria-hidden="true">#</a> version</h3><p><code>str</code> 类型, 模块的版本;</p><h3 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> description</h3><p><code>str</code> 类型, 模块的扩展描述; 可以是一个普通的文本; 也可以是 <code>RST</code> 格式的藏描述; 通常放在 <code>&quot;&quot;&quot; &quot;&quot;&quot;</code> 当中;</p><h3 id="author" tabindex="-1"><a class="header-anchor" href="#author" aria-hidden="true">#</a> author</h3><p><code>str</code> 类型, 是一个作者姓名的字符串; 如果有多个作者的话, 一般使用逗号来进行分隔, 但注意它仍应是一个字符串, 而非 Python 列表;</p><h3 id="website" tabindex="-1"><a class="header-anchor" href="#website" aria-hidden="true">#</a> website</h3><p><code>str</code> 类型, 这个 URL 可供人们访问来了解模块或作者的更多信息;</p><h3 id="license" tabindex="-1"><a class="header-anchor" href="#license" aria-hidden="true">#</a> license</h3><p><code>str</code> 类型, 默认为 <code>LGPL-3</code> 可选值:</p><ul><li><code>GPL-2</code></li><li><code>GPL-2 or any later version</code></li><li><code>GPL-3</code></li><li><code>GPL-3 or any later version</code></li><li><code>AGPL-3</code></li><li><code>LGPL-3</code></li><li><code>Other OSI approved licence</code></li><li><code>OEEL-1</code> (Odoo Enterprise Edition License v1.0)</li><li><code>OPL-1</code> (Odoo Proprietary License v1.0)</li><li><code>Other proprietary</code></li></ul><h3 id="category" tabindex="-1"><a class="header-anchor" href="#category" aria-hidden="true">#</a> category</h3><p><code>str</code> 类型, odoo 中的模块类别; 标准的模块类别请查看源码 <code>odoo/addons/base/data/ir_module_category_data.xml</code>; 默认为 <code>Uncategorized</code>;</p><p>该字段是自定义的, 并且 odoo 会动态创建类别; 类别层次结构可以使用 <code>/</code> 分隔符创建; 例如: <code>Services/Library</code>, 将会创建一个类别 <code>Services</code>, 并且将 <code>Library</code> 作为 <code>Services</code> 的子类别;</p><p>在 <code>apps</code> 界面点击 <code>Group By</code> --&gt; <code>Category</code> 可以看到:</p><p><img src="'+l+`" alt="odoo-module-category"></p><h3 id="depends" tabindex="-1"><a class="header-anchor" href="#depends" aria-hidden="true">#</a> depends</h3><p><code>list(str)</code> 类型; 当前模块所依赖的其他模块的名称; 如果当前模块不依赖于任何其他模块, 则 <code>depends</code> 至少为 <code>[&#39;base&#39;]</code>; 别忘记包含这个模块所引用的 <code>XML ID</code>、视图或模块的定义模型. 那样可确保它们以正确的顺序进行加载, 避免难以调试的错误;</p><h3 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> data</h3><p><code>list(str)</code> 类型; 这是在模块安装或升级时需加载数据文件的相对路径列表. 这些路径相对于模块的根目录. 通常, 这些是 <code>XML</code> 和 <code>CSV</code> 文件, 但也可以使用 <code>YAML</code> 格式的数据文件;</p><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> demo</h3><p><code>list(str)</code> 类型; 仅在演示模式下安装或更新的数据文件列表; 仅在创建数据库时启用了 <code>Demo Data</code> 标记时才会进行加载;</p><h3 id="auto-install" tabindex="-1"><a class="header-anchor" href="#auto-install" aria-hidden="true">#</a> auto_install</h3><p><code>bool</code> 或者是 <code>list(str)</code> 类型, 默认为 <code>False</code>; 如果为 True, 则在安装了该模块的所有依赖项后, 该模块将自动安装;</p><p>它通常用于实现两个独立模块之间协同集成的 &quot;链接模块&quot;; 例如: <code>sale_crm</code> 依赖于 <code>sale</code> 和 <code>crm</code> 模块, 当 <code>sale_crm</code> 的这个字段设置为 True 时, <code>sale</code> 模块和 <code>crm</code> 模块都安装好了, 就会自动安装 <code>sale_crm</code>;</p><p>如果它是一个列表, 那么它必须包含依赖项的子集; 一旦安装了子集中的所有依赖项, 就会自动安装此模块; 其余的依赖项也将自动安装. 如果列表为空, 则无论其依赖关系如何, 都将自动安装此模块;</p><h3 id="external-dependencies" tabindex="-1"><a class="header-anchor" href="#external-dependencies" aria-hidden="true">#</a> external_dependencies</h3><p><code>dict{ key: list(str) }</code> 类型; 声明模块所依赖的 python 包或者是二进制文件; <code>key</code> 值可选为 <code>python</code>, <code>bin</code>;</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;external_dependencies&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;python&#39;</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;pyusb&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;pyserial&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;qrcode&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>key</code> 为 <code>python</code> 的时候, <code>list</code> 里面的值为 python 的依赖包;</p><p>当 <code>key</code> 为 <code>bin</code> 的时候, <code>list</code> 里面为二进制可执行文件的名称;</p><p>如果主机中没有安装 python 的模块, 或者是在主机的 PATH 环境变量中找不到二进制可执行文件, 则不会安装该模块;</p><h3 id="application" tabindex="-1"><a class="header-anchor" href="#application" aria-hidden="true">#</a> application</h3><p><code>bool</code> 类型, 默认为 <code>False</code>, 如果声明为 <code>True</code>, 则该模块将作为一个完整的应用, 这意味着该模块将显示在应用程序主菜单中, 而不仅仅是在其他菜单中;</p><h3 id="assets" tabindex="-1"><a class="header-anchor" href="#assets" aria-hidden="true">#</a> assets</h3><p><code>dict</code> 类型; 用于指定模块所需的静态资源文件, 比如 <code>JavaScript</code>, <code>CSS</code> 和 <code>xml</code> 模板 等; 这些资源文件可以用于自定义界面、添加新的样式或功能; 以及优化用户体验.</p><h3 id="installable" tabindex="-1"><a class="header-anchor" href="#installable" aria-hidden="true">#</a> installable</h3><p><code>bool</code> 类型, 默认为 <code>True</code>, 用于定义模块是否可以被安装;</p><h3 id="maintainer" tabindex="-1"><a class="header-anchor" href="#maintainer" aria-hidden="true">#</a> maintainer</h3><p><code>str</code> 类型, 用于定义模块的维护者或负责人. 这个属性的值通常是一个字符串, 包含了模块的维护者的姓名或者联系方式;</p><h3 id="pre-init-post-init-uninstall-hook" tabindex="-1"><a class="header-anchor" href="#pre-init-post-init-uninstall-hook" aria-hidden="true">#</a> {pre_init, post_init, uninstall}_hook</h3><p><code>str</code> 类型, 可以定义用于在安装或卸载模块时执行的钩子函数;</p><ul><li><strong><code>pre_init_hook</code></strong>: 在模块安装之前调用的钩子函数;</li><li><strong><code>post_init_hook</code></strong>: 在模块安装之后调用的钩子函数;</li><li><strong><code>uninstall_hook</code></strong>: 在卸载模块时调用的钩子函数;</li></ul><p>这些钩子函数可以执行任意的操作, 例如初始化数据、检查依赖关系、更新配置等; 通过定义这些钩子函数, 开发者可以在模块安装和卸载时执行自定义的逻辑, 以满足特定的需求;</p><h3 id="active" tabindex="-1"><a class="header-anchor" href="#active" aria-hidden="true">#</a> active</h3><p><code>bool</code> 类型, 用于指定模块是否处于激活状态; 如果 <code>active</code> 属性为 <code>False</code>, 则表示该模块在安装后会处于非激活状态, 需要手动激活才能使用;</p>`,49);function _(f,y){const a=c("RouterLink");return n(),t("div",null,[h,o("p",null,[u,e(" 文件用于将 python 包声明为 odoo 的模块, 并指定模块的元数据; 在 "),s(a,{to:"/pages/web-server/odoo/section-01/%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97.html#odoo-%E6%A8%A1%E5%9D%97%E7%BB%93%E6%9E%84"},{default:i(()=>[e("第二章")]),_:1}),e(" 的模块结构中就简单的介绍了一下 "),m,e(" 文件的作用;")]),b])}const v=d(p,[["render",_],["__file","Manifest.html.vue"]]);export{v as default};
