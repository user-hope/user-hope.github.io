import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as i,o as a}from"./app-DHfXNCua.js";const r={};function s(l,e){return a(),o("div",null,e[0]||(e[0]=[i('<h2 id="javascript-指南" tabindex="-1"><a class="header-anchor" href="#javascript-指南"><span>Javascript 指南</span></a></h2><p>这一篇文档主要介绍 odoo 的 Javascript 框架, 它在代码行数上, 绝对算不上是一个大型的框架, 但是它非常的通用, 下面我们就来介绍一下框架的一些能力;</p><h2 id="web-客户端" tabindex="-1"><a class="header-anchor" href="#web-客户端"><span>Web 客户端</span></a></h2><p>这是一个单页面应用, 它不是在每次用户执行动作的时候请求整个页面, 而是只加载更新用户界面所需的内容; 在执行这个动作的时候, 它还负责更新 URL 中的信息, 因此, 在大多数情况下, 刷新页面或者是关闭浏览器, 再次打开的时候它还是会显示相同的内容;</p><p>下面的这些目录是 odoo web 框架的核心内容, 它们被放置在 <code>web/static/src</code> 目录下:</p><ul><li><strong>module_loader.js</strong>: 这个是 odoo 模块系统的定义, 它需要在任何其他 js 模块之前加载;</li><li><strong>core/</strong>: 此目录包含了构成 javascript 框架的最基础的代码, 可用于 web 客户端以及网站, 门户等应用程序;</li><li><strong>weblient/</strong>: 此目录包含了特定的 web client 的文件, 不能在网站或销售点中使用;</li><li><strong>webclient/webclient.js</strong>: 这个是 web 客户端组件, 它主要的作用是 container 和 navbar 的容器, 在启动的应用程序时候所需的一些动作;</li><li><strong>webclient/actions/</strong>: 此目录包含负责控制显示和隐藏的动作代码;</li><li><strong>views/</strong>: 此目录包含视图基础结构的代码, 以及大多数视图的定义;</li><li><strong>views/fields/</strong>: 此目录主要是各种字段组件的定义, 以及一些字段使用的 widget 组件;</li><li><strong>search/</strong>: search 视图的定义文件;</li></ul><h2 id="javascript-模块" tabindex="-1"><a class="header-anchor" href="#javascript-模块"><span>Javascript 模块</span></a></h2><p>大型的应用, 一般都需要拆分多个文件, 文件之间需要共享代码, 传统的方式是通过全局作用域(window对象) 共享, 但是会存在一些问题:</p><ul><li>难以隐藏实现细节(所有的函数都是全局可见的);</li><li>单一命名空间容易导致命名冲突;</li><li>依赖关系不明确, 加载顺序难以保证;</li></ul><p>解决方案:</p><ul><li>模块系统, 让每个模块都可以明确导入/导出值;</li><li>自动处理依赖之间的关系和加载顺序;</li><li>提供独立的命名空间, 避免暴露实现细节和命名冲突;</li></ul><p>odoo 框架的特殊考虑: 虽然 ES 模块是标准的方案, 但是直接使用会有一些问题:</p><ul><li>每个模块都需要网络请求, 这个在文件多的时候会比较慢;</li><li>很多文件即使在不被直接导入的时候, 也需要存在(为框架提供一些基础能力)</li></ul><p>因此, odoo 采用了资产包(assets bundles)系统:</p><ul><li>文件仍是 ES 模块, 但有特殊注解;</li><li>这些模块会被打包并转义, 供 odoo 的模块加载器使用;</li><li>推荐使用这种官方的方式而非直接写普通的 js 代码;</li></ul><p>简单来说, 就是解释了为什么大型应用需要模块化系统, 以及 odoo 框架如何通过自己的模块打包系统来优化标准的 ES 模块方案;</p>',16)]))}const c=t(r,[["render",s],["__file","Javascript指南.html.vue"]]),d=JSON.parse('{"path":"/pages/web-server/odoo/section-03/Javascript%E6%8C%87%E5%8D%97.html","title":"","lang":"zh-CN","frontmatter":{"headerDepth":4,"prev":{"link":"/pages/web-server/odoo/section-03/Patch.md"},"next":{"link":"/pages/web-server/odoo/section-03/Patch.md"},"description":"Javascript 指南 这一篇文档主要介绍 odoo 的 Javascript 框架, 它在代码行数上, 绝对算不上是一个大型的框架, 但是它非常的通用, 下面我们就来介绍一下框架的一些能力; Web 客户端 这是一个单页面应用, 它不是在每次用户执行动作的时候请求整个页面, 而是只加载更新用户界面所需的内容; 在执行这个动作的时候, 它还负责更新...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://github.com/user-hope/user-hope.github.io/pages/web-server/odoo/section-03/Javascript%E6%8C%87%E5%8D%97.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:description","content":"Javascript 指南 这一篇文档主要介绍 odoo 的 Javascript 框架, 它在代码行数上, 绝对算不上是一个大型的框架, 但是它非常的通用, 下面我们就来介绍一下框架的一些能力; Web 客户端 这是一个单页面应用, 它不是在每次用户执行动作的时候请求整个页面, 而是只加载更新用户界面所需的内容; 在执行这个动作的时候, 它还负责更新..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://github.com/user-hope/user-hope.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Javascript 指南","slug":"javascript-指南","link":"#javascript-指南","children":[]},{"level":2,"title":"Web 客户端","slug":"web-客户端","link":"#web-客户端","children":[]},{"level":2,"title":"Javascript 模块","slug":"javascript-模块","link":"#javascript-模块","children":[]}],"readingTime":{"minutes":2.66,"words":799},"filePathRelative":"pages/web-server/odoo/section-03/Javascript指南.md","autoDesc":true,"excerpt":"<h2>Javascript 指南</h2>\\n<p>这一篇文档主要介绍 odoo 的 Javascript 框架, 它在代码行数上, 绝对算不上是一个大型的框架, 但是它非常的通用, 下面我们就来介绍一下框架的一些能力;</p>\\n<h2>Web 客户端</h2>\\n<p>这是一个单页面应用, 它不是在每次用户执行动作的时候请求整个页面, 而是只加载更新用户界面所需的内容; 在执行这个动作的时候, 它还负责更新 URL 中的信息, 因此, 在大多数情况下, 刷新页面或者是关闭浏览器, 再次打开的时候它还是会显示相同的内容;</p>\\n<p>下面的这些目录是 odoo web 框架的核心内容, 它们被放置在 <code>web/static/src</code> 目录下:</p>"}');export{c as comp,d as data};
