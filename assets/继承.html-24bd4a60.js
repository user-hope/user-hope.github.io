import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,d as l,e as a}from"./app-9b0cd270.js";const i="/images/odoo/S14/inherit_view.png",u="/images/odoo/S14/record_extends.png",r="/images/odoo/S14/odoorpc.png",d="/images/odoo/S14/over_write.png",k="/images/odoo/S14/rewrite_super.png",v="/images/odoo/S14/over_write2.png",m="/images/odoo/S14/rewrite_super2.png",b={},g=a(`<h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><p>Odoo 的一项强大之处是无需直接修改所扩展模块的代码即可添加功能, 这都归功于与自身代码组件相独立的功能继承; 对模块的扩展可通过继承机制实现, 以已有对象的修改层的形式; 这些修改可以发生在每个层面, 包括模型、视图和业务逻辑层面; 我们不是直接修改原有模块, 而是新建一个模块, 采用所要做的修改在已有模块上新增一层;</p><p>不论是后端模型还是前端的 <code>Widget</code>, 抑或是组成报表的 <code>Qweb</code> 和视图, 我们推荐的核心原则就是能在不动原生源码的情况下, 就不要动原生的代码. 这可以说是 <code>Odoo</code> 开发中的最佳实践之一;</p><p>在前面的 <code>Mixin</code> 里面, 其实就是用到的模块的继承来实现的, 可以看成是一种原地修改的扩展, 这是最常用的一种方式, 但 <code>Odoo</code> 框架还支持适用其它场景下几种继承机制;</p><h3 id="经典继承" tabindex="-1"><a class="header-anchor" href="#经典继承" aria-hidden="true">#</a> 经典继承</h3><p>这是最常见的继承方式, 在已有的模型上添加新的字段或者覆盖原有的方法. 在模型中只需要使用 <code>_inherit</code> 并指定要继承的模型名, 然后在 <code>fields</code> 或者 <code>methods</code> 里面添加或者覆盖需要的部分. 这种方式通常用于已有模型上添加新的功能或者修改原有功能;</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">InheritedClass</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _inherit <span class="token operator">=</span> <span class="token string">&#39;base.model&#39;</span>

    new_field <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span>string<span class="token operator">=</span><span class="token string">&#39;New Field&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是用于添加或修改已经存在的模型; 这种方法在实际的数据库中还是操作的同一张表, 对表字段进行扩展; 也是最常用的方式, 例如我们需要在原有的 <code>res.partner</code> 上面扩展 odoo 原生 <code>res.partner</code> 的功能:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> odoo <span class="token keyword">import</span> fields<span class="token punctuation">,</span> api<span class="token punctuation">,</span> models


<span class="token keyword">class</span> <span class="token class-name">ResPartner</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _inherit <span class="token operator">=</span> <span class="token string">&quot;res.partner&quot;</span>

    branch_code <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span><span class="token string">&quot;Branch Code&quot;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;000&#39;</span><span class="token punctuation">,</span> compute<span class="token operator">=</span><span class="token string">&#39;_compute_branch_code&#39;</span><span class="token punctuation">,</span> store<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    first_name <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span><span class="token string">&quot;First Name&quot;</span><span class="token punctuation">)</span>
    middle_name <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span><span class="token string">&quot;Middle Name&quot;</span><span class="token punctuation">)</span>
    last_name <span class="token operator">=</span> fields<span class="token punctuation">.</span>Char<span class="token punctuation">(</span><span class="token string">&quot;Last Name&quot;</span><span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>model</span>
    <span class="token keyword">def</span> <span class="token function">_commercial_fields</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_commercial_fields<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">&#39;branch_code&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_inherit</code> 接受一个字符串作为参数时, 表示单一继承, 即当前模型继承自指定的单一模型; 还可以使用 <code>list</code> 参数, 表示多继承, 即当前模型同时继承自数组中列举的多个模型, 这使得模型可以同时继承多种模型的属性和行为;</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">class</span> <span class="token class-name">MassMailing</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _name <span class="token operator">=</span> <span class="token string">&#39;mailing.mailing&#39;</span>
    _description <span class="token operator">=</span> <span class="token string">&#39;Mass Mailing&#39;</span>
    _inherit <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;mail.thread&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;mail.activity.mixin&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;mail.render.mixin&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;utm.source.mixin&#39;</span>
    <span class="token punctuation">]</span>
    _order <span class="token operator">=</span> <span class="token string">&#39;calendar_date DESC&#39;</span>
    _rec_name <span class="token operator">=</span> <span class="token string">&quot;subject&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="委派继承" tabindex="-1"><a class="header-anchor" href="#委派继承" aria-hidden="true">#</a> 委派继承</h3><p>这是一种特殊的继承方式, 被委派的模型会有一个指向父模型的关联字段. 它的主要作用是将某个模型的部分功能&quot;委托&quot;给另一个模型, 这种方式的继承在数据库层面上添加了一个新的表. 当你想要创建一个新的模型, 但又希望保持某个模型的所有字段和行为时, 这种继承方式非常有用;</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Users</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>

    _name <span class="token operator">=</span> <span class="token string">&quot;res.users&quot;</span>
    _description <span class="token operator">=</span> <span class="token string">&#39;User&#39;</span>
    _inherits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;res.partner&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;partner_id&#39;</span><span class="token punctuation">}</span>
    
    partner_id <span class="token operator">=</span> fields<span class="token punctuation">.</span>Many2one<span class="token punctuation">(</span><span class="token string">&#39;res.partner&#39;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token string">&#39;restrict&#39;</span><span class="token punctuation">,</span> auto_join<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> string<span class="token operator">=</span><span class="token string">&#39;Related Partner&#39;</span><span class="token punctuation">)</span>
    
    
<span class="token keyword">class</span> <span class="token class-name">ProductProduct</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _name <span class="token operator">=</span> <span class="token string">&quot;product.product&quot;</span>
    _description <span class="token operator">=</span> <span class="token string">&quot;Product Variant&quot;</span>
    _inherits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;product.template&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;product_tmpl_id&#39;</span><span class="token punctuation">}</span>
    
    product_tmpl_id <span class="token operator">=</span> fields<span class="token punctuation">.</span>Many2one<span class="token punctuation">(</span><span class="token string">&#39;product.template&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Product Template&#39;</span><span class="token punctuation">,</span> auto_join<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ondelete<span class="token operator">=</span><span class="token string">&quot;cascade&quot;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>委派继承用于包含已经存在的模型的情况, 如你需要新模型具有已经存在的模型的所有字段和行为;</p><p>这种方式会创建一个新的表, 必须包含一个 <code>Many2one</code> 的字段, 指向被继承的对象, 当其中任何一方的值发生变化的时候, 都会同步到另一方中;</p><p>odoo 典型的应用就是官方模块中的产品模板与产品的关系, 在 <code>Odoo</code> 原生模块中, 有一个对象叫做 <code>product.template</code>, 指的是一系列产品的通用模板属性; 而在销售、采购和仓储的实际运用中, 使用的是叫 <code>product.product</code> 的对象, 这个才是真正的产品; <code>product.product</code> 和 <code>product.template</code> 的关系就是我们上面所说的属性继承的关系; <code>product.product</code> 中一个 <code>many2one</code> 的字段 <code>product_tmpl_id</code> 关联的就是 <code>product.template</code>, 当 <code>product.template</code> 中的属性发生变化时, 没有被重写(注意: <code>product.product</code> 对象中有些字段覆盖了 <code>product.template</code> 中的字段)的属性就会跟着变化; 形成了一种有趣的引用关系;</p><h3 id="原型继承" tabindex="-1"><a class="header-anchor" href="#原型继承" aria-hidden="true">#</a> 原型继承</h3><p>这也是一种特殊的继承方式, 在数据库层面它实际上是新建一个与继承的模型相同的模型 (名称不同). 尽管两个模型在数据库中存在于不同的表, 但是从 Odoo 的角度看, 它们就是一个模型, 这就意味着除了名称, 新模型的所有其他属性都会与原模型相同. 这种方式的继承在需要一个修改过的模型副本, 但是又不想改变原始模型时非常有用;</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">InheritedClass</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _name <span class="token operator">=</span> <span class="token string">&#39;new.model&#39;</span>
    _inherit <span class="token operator">=</span> <span class="token string">&#39;base.model&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原型继承用于你需要一个已经存在的模型的复制, 并且希望这个复制在数据库中是独立存在的;</p><p>经典继承使用 <code>_inherit</code> 属性扩展模型, 因其未修改 <code>_name</code> 属性, 可对该模型执行有效的原地变更; 如果使用 <code>_inherit</code> 的同时修改了 <code>_name</code> 属性, 就会获得一具所继承模型的副本; 这时新模型就会获得仅针对其自身的功能, 不会添加到父模型中; 副本模型与父模型相独立, 不受父模型修改的影响, 它有自有的数据表和数据;</p><h2 id="视图和数据继承" tabindex="-1"><a class="header-anchor" href="#视图和数据继承" aria-hidden="true">#</a> 视图和数据继承</h2><p>视图和其它数据组件也可通过模块继承来修改; 就视图而言, 通常是添加功能. 视图的展示结构通过XML定义. 对XML的继承, 我们需要定位到所要继承的节点, 然后声明在该处执行的操作, 如插入XML元素;</p><p>其它的数据元素表现为数据库中写入的记录. 继承模块对在其上写入, 来修改一些值;</p><h3 id="视图继承" tabindex="-1"><a class="header-anchor" href="#视图继承" aria-hidden="true">#</a> 视图继承</h3><p>视图使用XML定义, 存储在结构字段 <code>arch</code> 中. 继承视图, 我们需要定位到所要继承的节点, 然后声明所做的修改, 如添加XML元素;</p><p>Odoo 自带继承 XML 的简化标记, 使用希望匹配的XML标签, 如 <code>&lt;field&gt;</code>, 借由一个或多个独特属性进行匹配, 如 <code>name</code>. 然后必须要添加 <code>position</code> 属性来声明修改的类型;</p><p>视图继承的主要方式就是通过 <code>inherit_id</code> 和 <code>xpath</code> 实现的. 后面会单独介绍 <code>xpath</code>; 先来看一下 odoo 里面已有的模块实现的 xml 继承:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>record</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view_partner_property_form<span class="token punctuation">&quot;</span></span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ir.ui.view<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>res.partner.property.form.inherit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>res.partner<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>priority<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inherit_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>base.view_partner_form<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>arch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xpath</span> <span class="token attr-name">expr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//group[@name=&#39;misc&#39;]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>before<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Fiscal Information<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fiscal_information<span class="token punctuation">&quot;</span></span> <span class="token attr-name">priority</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">groups</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>account.group_account_invoice,account.group_account_readonly<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>property_account_position_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{&#39;no_create&#39;: True, &#39;no_open&#39;: True}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xpath</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>record</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;field name=&quot;inherit_id&quot; ref=&quot;base.view_partner_form&quot;/&gt;</code> 表示为 <code>base</code> 模块里面的 <code>view_partner_form</code> 视图在 <code>group</code> 的 <code>name=misc</code> 后面添加内容;</p><p>视图的继承还有另外一种简化的写法, 除了 <code>xpath</code> 外, 对于 <code>field</code> 节点, 我们可以直接在 <code>field</code> 里面插入:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>record</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view_move_line_tax_audit_tree<span class="token punctuation">&quot;</span></span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ir.ui.view<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>account.move.line.tax.audit.tree<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>account.move.line<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mode<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>primary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inherit_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>account.view_move_line_tree<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>arch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>matching_number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>replace<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tax_line_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Tax<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tax_base_amount<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Total Base Amount<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tax_audit<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>analytic_distribution<span class="token punctuation">&quot;</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>attributes<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>optional<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hide<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>record</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种写法与 <code>XPATH</code> 的效果完全一样;</p><h3 id="继承的优先级" tabindex="-1"><a class="header-anchor" href="#继承的优先级" aria-hidden="true">#</a> 继承的优先级</h3><p>当一个视图被多个视图继承时, 页面最终渲染的效果是这些视图叠加的效果; 在视图的对象 <code>ir.ui.view</code> 种有一个字段用于标识视图的优先级, 这个字段就是 <code>priority</code>, 当 <code>priority</code> 的值越小, 它的优先级就越高;</p><p>想要查看本页面有哪些视图继承, 可以在 <code>debug</code> 模式下, 打开右上角的 <code>debug</code> --&gt; <code>编辑视图</code>:</p><p><img src="`+i+`" alt="debug-inherit-view"></p><h3 id="数据继承" tabindex="-1"><a class="header-anchor" href="#数据继承" aria-hidden="true">#</a> 数据继承</h3><p>普通数据也可以被继承, 在实际应用中, 通常是重写已有的值, 这个时候我们只需要定位到写入的记录, 以及更新的字段和值; 无需使用 <code>xpath</code> 表达式, 因为我们并不是像对视图那样修改 <code>xml</code> 中的 <code>arch</code> 结构;</p><p><code>&lt;record id=&quot;x&quot; model=&quot;y&quot;&gt;</code> 数据加载元素执行对 <code>y</code> 模型的插入或更新操作: 若不存在 <code>x</code> 记录, 则创建, 否则被更新/覆盖;</p><p>其它模块中的记录可通过 <code>&lt;module&gt;.&lt;identifier&gt;</code> 全局标识符访问, 因此一个模块可以更新其它模块创建的记录;</p><p>例如: 我们在 <code>library</code> 模块下面在新建一个 <code>library\\library_app\\security\\library_data.xml</code> 数据文件, 内容如下:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>odoo</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>record</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>library_group_user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>res.groups<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Librarian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>record</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>odoo</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用了一个 <code>&lt;record&gt;</code> 元素, 仅写了 <code>name</code> 字段, 可以认为这是对改字段的一次写的操作;</p><blockquote><p>使用 <code>&lt;record&gt;</code> 元素时, 可以选择要执行写操作的字段, 但对简写元素则并非如此; 如 <code>&lt;menuitem&gt;</code> 和 <code>&lt;act_window&gt;</code>, 它们需要提供所有的属性, 漏写任何一个都会将对应字段置为空值; 但可使用 <code>&lt;record&gt;</code> 为原本通过简写元素创建的字段设置值;</p></blockquote><p>然后我们再次升级模块, 就可以看到组名被更新成了 <code>Librarian</code>;</p><p><img src="`+u+`" alt="record-extends"></p><h2 id="网页继承" tabindex="-1"><a class="header-anchor" href="#网页继承" aria-hidden="true">#</a> 网页继承</h2><p>可扩展性是 <code>Odoo</code> 框架的一个关键设计选择, <code>Odoo</code> 的网页组件同样可进行继承; 所以可对 <code>Odoo</code> 网页控制器和模板进行扩展;</p><h3 id="继承网页控制器" tabindex="-1"><a class="header-anchor" href="#继承网页控制器" aria-hidden="true">#</a> 继承网页控制器</h3><p>网页控制器处理网页请求并渲染页面返回响应. 应关注展示逻辑, 不处理业务逻辑, 业务逻辑在模型方法中处理;</p><p>支持参数或 URL 路由属于网页展示部分, 适合用网页控制器处理;</p><p>例如: 为网站端的支付方式扩展:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> odoo <span class="token keyword">import</span> _
<span class="token keyword">from</span> odoo<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> AccessError<span class="token punctuation">,</span> MissingError<span class="token punctuation">,</span> ValidationError
<span class="token keyword">from</span> odoo<span class="token punctuation">.</span>fields <span class="token keyword">import</span> Command
<span class="token keyword">from</span> odoo<span class="token punctuation">.</span>http <span class="token keyword">import</span> request<span class="token punctuation">,</span> route

<span class="token keyword">from</span> odoo<span class="token punctuation">.</span>addons<span class="token punctuation">.</span>payment <span class="token keyword">import</span> utils <span class="token keyword">as</span> payment_utils
<span class="token keyword">from</span> odoo<span class="token punctuation">.</span>addons<span class="token punctuation">.</span>payment<span class="token punctuation">.</span>controllers <span class="token keyword">import</span> portal <span class="token keyword">as</span> payment_portal

<span class="token keyword">class</span> <span class="token class-name">PaymentPortal</span><span class="token punctuation">(</span>payment_portal<span class="token punctuation">.</span>PaymentPortal<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token decorator annotation punctuation">@route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">payment_pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> amount<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> invoice_id<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> access_token<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        amount <span class="token operator">=</span> self<span class="token punctuation">.</span>_cast_as_float<span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
        invoice_id <span class="token operator">=</span> self<span class="token punctuation">.</span>_cast_as_int<span class="token punctuation">(</span>invoice_id<span class="token punctuation">)</span>
        <span class="token keyword">if</span> invoice_id<span class="token punctuation">:</span>
            invoice_sudo <span class="token operator">=</span> request<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;account.move&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sudo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>browse<span class="token punctuation">(</span>invoice_id<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> invoice_sudo<span class="token punctuation">:</span>
                <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">&quot;The provided parameters are invalid.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
            <span class="token keyword">if</span> <span class="token keyword">not</span> payment_utils<span class="token punctuation">.</span>check_access_token<span class="token punctuation">(</span>
                access_token<span class="token punctuation">,</span> invoice_sudo<span class="token punctuation">.</span>partner_id<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> invoice_sudo<span class="token punctuation">.</span>currency_id<span class="token punctuation">.</span><span class="token builtin">id</span>
            <span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">&quot;The provided parameters are invalid.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
            kwargs<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token string">&#39;currency_id&#39;</span><span class="token punctuation">:</span> invoice_sudo<span class="token punctuation">.</span>currency_id<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>
                <span class="token string">&#39;partner_id&#39;</span><span class="token punctuation">:</span> invoice_sudo<span class="token punctuation">.</span>partner_id<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>
                <span class="token string">&#39;company_id&#39;</span><span class="token punctuation">:</span> invoice_sudo<span class="token punctuation">.</span>company_id<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>
                <span class="token string">&#39;invoice_id&#39;</span><span class="token punctuation">:</span> invoice_id<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>payment_pay<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> amount<span class="token operator">=</span>amount<span class="token punctuation">,</span> access_token<span class="token operator">=</span>access_token<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析一下这段代码, 其中所要继承的控制器 <code>payment_portal.PaymentPortal</code>, 是在 <code>payment</code> 模块里面声明的; 因此需要导入 <code>from odoo.addons.payment.controllers import portal as payment_portal</code> 来应用该文件;</p><p>这与模型不同, 模型有一个中央仓库可以获取任意模型类的引用, 如 <code>self.env[&#39;sale.order&#39;]</code>, 无需知道具体实现它的文件; 控制器没有这样的快捷方法, 所以只能通过模块引入的方式;</p><p>然后重新定义了一个 <code>PaymentPortal</code> 类, 继承自原有的类, 类名不具备关联性, 仅是继承和扩展的一个载体; 下面定义了一个 <code>payment_pay</code> 方法, 它至少需要一个 <code>@route()</code> 装饰器来保持路由为活跃状态;</p><p>如果不带参数, 将会保留父类中定义的路由, 但是也可以为 <code>@route()</code> 添加参数, 来重新定义或者是替换路由;</p><p><code>**kwargs</code> 参数, 捕获所有的 <code>kwargs</code> 字典中的参数, 这些是 URL 中给定的参数, 例如: <code>?available=1</code>;</p><h3 id="qweb-模板继承" tabindex="-1"><a class="header-anchor" href="#qweb-模板继承" aria-hidden="true">#</a> Qweb 模板继承</h3><p>网页模板为 XML 文档, 和其它 Odoo 视图类型一样可以使用选择器表达式, 像我们在其他视图类型如表单中使用那样. <code>QWeb</code> 模板通常更为复杂, 会包含更多的HTML元素, 因此大多数据时候会使用更多样的 XPath 表达式;</p><p>QWeb 继承是一个 <code>&lt;template&gt;</code> 元素, 使用额外 <code>inherit_id</code> 属性来标识待继承的 <code>QWeb</code> 模板;</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>odoo</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkout<span class="token punctuation">&quot;</span></span> <span class="token attr-name">inherit_id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>payment.checkout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xpath</span> <span class="token attr-name">expr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.<span class="token punctuation">&quot;</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inside<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>t</span> <span class="token attr-name">t-call</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>payment_stripe.sdk_assets<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xpath</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>manage<span class="token punctuation">&quot;</span></span> <span class="token attr-name">inherit_id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>payment.manage<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xpath</span> <span class="token attr-name">expr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.<span class="token punctuation">&quot;</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inside<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>t</span> <span class="token attr-name">t-call</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>payment_stripe.sdk_assets<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xpath</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>express_checkout<span class="token punctuation">&quot;</span></span> <span class="token attr-name">inherit_id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>payment.express_checkout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xpath</span> <span class="token attr-name">expr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.<span class="token punctuation">&quot;</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inside<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>t</span> <span class="token attr-name">t-call</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>payment_stripe.sdk_assets<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xpath</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sdk_assets<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 这里有一个小技巧, 一般的 assets 是放置在  __manifest__.py 里面, 但是有一些链接比较特殊, 是没有后缀名的, 可以用继承的方式给模板都加上这一段 script --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://js.stripe.com/v3/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>odoo</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重载" tabindex="-1"><a class="header-anchor" href="#重载" aria-hidden="true">#</a> 重载</h2><p>重载的概念就是通过继承, 重写原有模块的某些方法, 拦截原有的执行路径, 达到修改或是改造的目的;</p><h3 id="简单的重载" tabindex="-1"><a class="header-anchor" href="#简单的重载" aria-hidden="true">#</a> 简单的重载</h3><p>我们先来看一下, 如何对一个既有模块的方法进行重载的操作, 还是以我们的 <code>library_app</code> 模块为例, 我们先给 <code>library.book</code> 模型添加一个新的方法: <code>print_book_name</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> odoo <span class="token keyword">import</span> models<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> api
<span class="token keyword">import</span> logging

_logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _name <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>
    _description <span class="token operator">=</span> <span class="token string">&#39;Book&#39;</span>
    _inherit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;mail.thread&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mail.activity.mixin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utm.mixin&#39;</span><span class="token punctuation">]</span>
    
    <span class="token keyword">def</span> <span class="token function">print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
        _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;图书名称: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加了一个方法, 就是打印一下本书的 <code>name</code>, 然后为了方便测试, 我们再使用 <code>odoorpc</code> 来远程调用一下这个方法:</p>`,70),_=n("code",null,"odoorpc",-1),q=n("code",null,"pip install OdooRPC",-1),h={href:"https://pypi.org/project/OdooRPC/",target:"_blank",rel:"noopener noreferrer"},f=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> odoorpc

host <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span>
port <span class="token operator">=</span> <span class="token number">8091</span>
db <span class="token operator">=</span> <span class="token string">&#39;odoo_16_test_20231127&#39;</span>

<span class="token comment"># 这里的用户是 res.users 表里面的用户</span>
user <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span>
password <span class="token operator">=</span> <span class="token string">&#39;xxxx&#39;</span>


odoo <span class="token operator">=</span> odoorpc<span class="token punctuation">.</span>ODOO<span class="token punctuation">(</span>host<span class="token operator">=</span>host<span class="token punctuation">,</span> port<span class="token operator">=</span>port<span class="token punctuation">)</span>
odoo<span class="token punctuation">.</span>login<span class="token punctuation">(</span>db<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span>

Book <span class="token operator">=</span> odoo<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">&#39;library.book&#39;</span><span class="token punctuation">]</span>
book <span class="token operator">=</span> Book<span class="token punctuation">.</span>browse<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

book<span class="token punctuation">.</span>print_book_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行测试, 可以看到, 当我们调用 <code>rpc</code> 时, 后台日志会输出本图书的名字:</p><p><img src="`+r+`" alt="odoo-rpc"></p><p>现在, 我们希望能够把发布者的名字也添加到日志中, 但是不修改 <code>Book</code> 类的代码, 这个时候我们需要新建一个类, 继承自 <code>Book</code>; (这里为了好区分, 新建的文件命名为 <code>library_sub_book.py</code>)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> odoo<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError
<span class="token keyword">from</span> odoo <span class="token keyword">import</span> models<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> api
<span class="token keyword">import</span> logging

_logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">SubBook</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>

    _inherit <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>

    <span class="token keyword">def</span> <span class="token function">print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        重载父类的方法
        &quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
        _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;图书名称: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">, 作者: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>publisher_id<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>升级模块之后, 我们再来调用一下 rpc, 可以看到输出的信息:</p><p><img src="`+d+`" alt="over-write"></p><h3 id="复用父类调用的结果" tabindex="-1"><a class="header-anchor" href="#复用父类调用的结果" aria-hidden="true">#</a> 复用父类调用的结果</h3><p>如果希望在父类方法返回的结果上进行修改, 可以通过 <code>super</code> 方法进行调用, 这个例子中由于父类方法并不返回值, 因此只是调用了一下父类, 并没有真正的复用:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    重载父类的方法
    &quot;&quot;&quot;</span>
    self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin">super</span><span class="token punctuation">(</span>SubBook<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>print_book_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
    _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;图书名称: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">, 作者: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>publisher_id<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到, 父类的方法也被调用:</p><p><img src="`+k+`" alt="rewrite-super"></p><h3 id="私有方法不会被调用" tabindex="-1"><a class="header-anchor" href="#私有方法不会被调用" aria-hidden="true">#</a> 私有方法不会被调用</h3><p>有一个例外, 就是如果方法为私有方法(以双下划线开头), 那么重载将不会起作用:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _name <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>
    
    <span class="token keyword">def</span> <span class="token function">print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>__print_book_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;图书名称: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        

<span class="token keyword">class</span> <span class="token class-name">SubBook</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _inherit <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>
    
    <span class="token keyword">def</span> <span class="token function">__print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        重载父类的方法
        &quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
        _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;图书名称: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">, 作者: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>publisher_id<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 rpc 的时候, 将只有 <code>Book</code> 类的方法被调用, 之类的私有方法不会被调用; 这点跟 <code>python</code> 本身的继承表现是一致的;</p><h3 id="多层重载" tabindex="-1"><a class="header-anchor" href="#多层重载" aria-hidden="true">#</a> 多层重载</h3><p>在实际应用中, 重载往往应用的非常的广泛, 例如: 在模型的 <code>create</code> 或者是 <code>write</code> 方法里面添加一些逻辑, 那么如果有多个子类都重载了父类的方法, 会执行哪一个呢? 下面我们就来看看这个问题的答案:</p><p>上面我们创建了一个子类 <code>SubBook</code>, 这里我们再创建一个子类 <code>Subbook2</code>, 方法跟 <code>SubBook</code> 一样:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _name <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>
    
    <span class="token keyword">def</span> <span class="token function">print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>__print_book_name<span class="token punctuation">(</span><span class="token punctuation">)</span>



<span class="token keyword">class</span> <span class="token class-name">SubBook</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>

    _inherit <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>

    <span class="token keyword">def</span> <span class="token function">print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        重载父类的方法
        &quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
        _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;图书名称: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">, 作者: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>publisher_id<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>



<span class="token keyword">class</span> <span class="token class-name">SubBook2</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>

    _inherit <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>

    <span class="token keyword">def</span> <span class="token function">print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        重载父类的方法
        &quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
        _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;SubBook2的方法. 图书名称: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">, 作者: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>publisher_id<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 rpc 调用, 输出结果如下:</p><p><img src="`+v+`" alt="over-write2"></p><p>由此可以看出, 当有多个子类重载了同一个父类的方法时, 只有最后加载的那个子模块的方法会被调用;</p><h3 id="指定重载" tabindex="-1"><a class="header-anchor" href="#指定重载" aria-hidden="true">#</a> 指定重载</h3><p>如果, 在子类 <code>SubBook</code> 中调用了父类的方法, 同时子类 <code>SubBoo2</code> 也调用父类方法, 那么会出现什么结果呢?</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SubBook</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>

    _inherit <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>

    <span class="token keyword">def</span> <span class="token function">print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        重载父类的方法
        &quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>SubBook<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>print_book_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
        _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;图书名称: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">, 作者: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>publisher_id<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>



<span class="token keyword">class</span> <span class="token class-name">SubBook2</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>

    _inherit <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>

    <span class="token keyword">def</span> <span class="token function">print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        重载父类的方法
        &quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>SubBook2<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>print_book_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
        _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;SubBook2的方法. 图书名称: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">, 作者: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>publisher_id<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+`" alt="over-write2"></p><p>可以看到, 三个方法都被调用了, 因此, 在子类中使用 <code>super</code> 调用父类的方法, 会调用继承链上所有的重载方法; 那么, 我们如何只通过子类 <code>SubBook2</code> 调用父类的方法, 而不触发 <code>SubBook</code> 中的同名方法呢?</p><p>答案是在 <code>SubBook2</code> 中直接调用 <code>SubBook</code> 的父类方法:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SubBook2</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>

    _inherit <span class="token operator">=</span> <span class="token string">&#39;library.book&#39;</span>

    <span class="token keyword">def</span> <span class="token function">print_book_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        重载父类的方法
        &quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>ensure_one<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>SubBook<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>print_book_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
        _logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;SubBook2的方法. 图书名称: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">, 作者: </span><span class="token interpolation"><span class="token punctuation">{</span> self<span class="token punctuation">.</span>publisher_id<span class="token punctuation">.</span>name <span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function y(x,w){const t=e("ExternalLinkIcon");return o(),c("div",null,[g,n("blockquote",null,[n("p",null,[_,s(" 是社区维护的一个模块, 可以脱离 odoo 框架在任何 py 文件里面远程调用 odoo 模型的方法; 需要 "),q,s("; 具体请查看 "),n("a",h,[s("OdooRPC"),l(t)])])]),f])}const S=p(b,[["render",y],["__file","继承.html.vue"]]);export{S as default};
