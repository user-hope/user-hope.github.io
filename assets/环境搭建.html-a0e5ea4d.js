import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as t,c as l,a as e,b as o,d as n,e as a}from"./app-9b0cd270.js";const i="/images/odoo/S01/login.png",r="/images/odoo/S01/database-manager.png",p={},u=a('<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>本章节将开始从 0 - 1 搭建一个 <code>odoo</code> 系统, 适用于对 <code>odoo</code> 没有经验的读者, 如果您对 <code>odoo</code> 已经有经验了, 可以跳过本章节;</p><h2 id="操作系统的选择" tabindex="-1"><a class="header-anchor" href="#操作系统的选择" aria-hidden="true">#</a> 操作系统的选择</h2><p><code>Odoo</code> 的最佳操作系统推荐是 <code>Ubuntu</code>, 如果对 <code>Linux</code> 不熟悉, 也可以选择 <code>Windows</code> 进行安装, 只是 <code>Windows</code> 上只推荐做开发环境, 并不推荐部署生产环境.</p><h2 id="环境搭建-1" tabindex="-1"><a class="header-anchor" href="#环境搭建-1" aria-hidden="true">#</a> 环境搭建</h2><p><code>Odoo</code> 的环境搭建方式多种多样, 按方式划分的话可以分为源码安装和安装包安装两种方式; 源码安装的方式相对比较繁琐, 适合于喜欢自己动手同学; 安装包安装的方式比较简洁, 适合于喜欢傻瓜式安装软件的同学; 两种方式没有优劣之分, 取决于你的心情. 下面简单介绍一下这两种安装方式</p><h3 id="源码安装" tabindex="-1"><a class="header-anchor" href="#源码安装" aria-hidden="true">#</a> 源码安装</h3><blockquote><p>本文档以 odoo 16 为例, 介绍在 windows 环境下面的安装与启动方法;</p></blockquote><p>我们首先来看一下, 如何使用源码安装的方式进行安装; 源码安装的优势是, 所有的组件都是自己完成的, 相对的灵活可控, 不必拘泥于系统安装方式的束缚. 缺点是, 对用户的动手能力要求很高, 安装过程中会碰到各种各样的问题, 需要有很强的搜索和解决问题的能力;</p><h4 id="安装环境依赖" tabindex="-1"><a class="header-anchor" href="#安装环境依赖" aria-hidden="true">#</a> 安装环境依赖</h4><p><code>Odoo12.0</code> 以后已经全面使用 <code>Python3</code> 作为后端的主要语言了, 因此, 需要先安装 <code>Python3</code>, 推荐3.6及以后的版本. 如果使用的是 <code>Ubuntu 18.04+</code> 的发行版本, 系统已经集成了 <code>Python3</code>;</p>',11),g={href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.enterprisedb.com/downloads/postgres-postgresql-downloads",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.jetbrains.com/pycharm/",target:"_blank",rel:"noopener noreferrer"},h=e("h4",{id:"安装-odoo",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装-odoo","aria-hidden":"true"},"#"),o(" 安装 odoo")],-1),k={href:"https://visualstudio.microsoft.com/visual-cpp-build-tools/",target:"_blank",rel:"noopener noreferrer"},_=a(`<ol><li>使用 <code>git</code> 将 <code>odoo</code> 的源码克隆到本地, 注意选择你要安装的版本分支:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/odoo/odoo.git <span class="token parameter variable">-b</span> <span class="token number">16.0</span> <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>代码下载下来之后, 进入文件夹使用如下命令进行安装, 由于网络的原因, 很多插件自动安装不上, 需要手动安装, 这也是源码安装最为繁琐的地方;</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python setup.py <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>期间可能会遇到各种异常, 这时就需要使用搜索引擎依次解决. 这里列出常见的几个:</p><ul><li>安装 <code>psycopg2</code> 出错:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error: Setup script exited with error: <span class="token builtin class-name">command</span> <span class="token string">&#39;x86_64-linux-gnu-gcc&#39;</span> failed with <span class="token builtin class-name">exit</span> status <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要安装 <code>libpq-dev</code>, <code>apt install libpq-dev</code>;</p><ul><li>ModuleNotFoundError: No module named &#39;werkzeug.contrib&#39;:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token assign-left variable">werkzeug</span><span class="token operator">==</span><span class="token number">0.16</span>.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>ModuleNotFoundError: No module named &#39;win32service&#39;</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pywin32
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后安装 <code>Python</code> 依赖: <code>pip3 install -r requirements.txt</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt

<span class="token comment"># or 镜像</span>
pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt  <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple

<span class="token comment"># or 权限</span>
pip <span class="token function">install</span> <span class="token parameter variable">-Ur</span> requirements.txt <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>所有插件安装完成后, 即可使用如下的命令启动:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python odoo-bin --addons-path<span class="token operator">=</span><span class="token string">&#39;./addons&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上, odoo-bin 启动的时候, 可以传入很多启动参数, 下面是一些常见的参数:</p><ul><li><code>server(启动服务)</code>: <ul><li><strong><code>-d</code></strong>: 或者是 <code>--database</code>, 用于指定链接数据库的名称;</li><li><strong><code>-i</code></strong>: 或者是 <code>--init</code>, 用于指定服务器在运行之前要安装的模块 (依赖 <code>-d</code> 参数);</li><li><strong><code>-u</code></strong>: 或者是 <code>--update</code>, 用于指定服务器在运行之前需要更新的模块 (依赖 <code>-d</code> 参数);</li><li><strong><code>--addons-path</code></strong>: 指定 addons 模块存储的目录, 有多个可以用 <code>,</code> 隔开;</li><li><strong><code>-c</code></strong>: 或者是 <code>--config</code>, 用于指定配置文件的地址;</li><li><strong><code>-s</code></strong>: 或者是 <code>--save</code>, 将服务器配置保存到当前配置文件;</li><li><strong><code>--without-demo</code></strong>: 不使用 demo 的演示数据;</li><li><strong><code>--test-enable</code></strong>: 是否在模块安装之后执行 test;</li><li><strong><code>--test-tags</code></strong>: 用于运行 odoo 测试的时候指定要执行的测试标签;</li><li><strong><code>--screenshots</code></strong>: 指定 HttpCase.browser_js 测试失败时写入屏幕截图的目录;</li><li><strong><code>--screencasts</code></strong>: 启用截屏视频并指定写入截屏视频文件的目录, <code>ffmpeg</code> 需要安装该实用程序才能将帧编码为视频文件; 否则, 将保留帧而不是视频文件;</li></ul></li><li><code>database(数据库)</code>: <ul><li><strong><code>-r</code></strong>: 或者是 <code>--db_user</code>, 指定链接 <code>PostgreSQL</code> 的用户;</li><li><strong><code>-w</code></strong>: 或者是 <code>--db_password</code>, 指定链接 <code>PostgreSQL</code> 的密码;</li><li><strong><code>--db_host</code></strong>: 指定链接的数据库的启动地址;</li><li><strong><code>--db_port</code></strong>: 指定链接的数据库的启动端口号;</li><li><strong><code>--db-filter</code></strong>: 隐藏与 filter 不匹配的数据库, 过滤器是一个正则表达式;</li><li><strong><code>--db-template</code></strong>: 从数据库管理界面创建新数据库时, 使用指定的数据库模板;</li><li><strong><code>--pg_path</code></strong>: 数据库管理器用于恢复数据库的二进制文件路径;</li><li><strong><code>--no-database-list</code></strong>: 取消列出系统上可用数据库的功能;</li><li><strong><code>--db_sslmode</code></strong>: 控制 <code>Odoo</code> 和 <code>PostgreSQL</code> 之间连接的SSL安全性; 值为 <code>disable</code>, <code>allow</code>, <code>prefer</code>, <code>require</code>, <code>verify-ca</code>, <code>verify-full</code> 之一, 默认为 <code>prefer</code>;</li></ul></li><li><code>emails(电子邮件)</code>: <ul><li><strong><code>--email-from</code></strong>: odoo 发送邮件的时候用作电子邮件的 from 地址;</li><li><strong><code>--smtp</code></strong>: 发送邮件的 SMTP 服务器的地址;</li><li><strong><code>--smtp-port</code></strong>: smtp 服务器的端口号;</li><li><strong><code>--smtp-ssl</code></strong>: 如果设置了, odoo 就会使用 <code>SSL/STARTSSL</code> 链接 smtp;</li><li><strong><code>--smtp-user</code></strong>: smtp 服务器的用户名;</li><li><strong><code>--smtp-password</code></strong>: smtp 服务器的密码;</li></ul></li><li><code>Internationalisation(国际化)</code>: <ul><li><strong><code>--load-language</code></strong>: 指定需要加载的翻译语言, 如果有多个, 用 <code>,</code> 隔开;</li><li><strong><code>-l</code></strong>: 或者是 <code>--language</code>, 指定翻译文件的语言, 一般与 <code>-i18n</code> 导出或者是 <code>-i18n</code> 导入一起使用;</li><li><strong><code>--i18n-export</code></strong>: 将所有要翻译的句子导出到 <code>CSV</code> 文件, <code>PO</code> 文件或 <code>TGZ</code> 文件并退出;</li><li><strong><code>--i18n-import</code></strong>: 导入带有翻译的 <code>CSV</code> 或 <code>PO</code> 文件并退出;</li><li><strong><code>--i18n-overwrite</code></strong>: 在更新模块或导入 <code>CSV</code> 或 <code>PO</code> 文件时覆盖现有翻译术语;</li><li><strong><code>--modules</code></strong>: 指定要导出的模块, 与 <code>-i18n</code> 导出结合使用;</li></ul></li><li><code>Developer(开发者选项)</code><ul><li><strong><code>--dev</code></strong>: <ul><li><strong><code>all</code></strong>: 下面列出来的所有功能都激活;</li><li><strong><code>xml</code></strong>: 下次更新/启动之前从代码的 xml 里面读取 <code>qweb</code>, 而不是从数据库中读取;</li><li><strong><code>reload</code></strong>: 在更新 <code>python</code> 文件时重新启动服务器;</li><li><strong><code>qweb</code></strong>: 当遇到 <code>t-debug=&#39;debugger&#39;</code> 是终端 <code>qweb</code> 渲染;</li></ul></li></ul></li><li><code>http(http配置)</code>: <ul><li><strong><code>--no-http</code></strong>: 不要启动 <code>HTTP</code> 或长轮询工作程序;</li><li><strong><code>--http-interface</code></strong>: <code>HTTP</code> 服务器侦听的 <code>TCP/IP</code> 地址, 默认为 <code>0.0.0.0</code> (所有地址);</li><li><strong><code>--http-port</code></strong>: <code>http</code> 服务启动的端口号, 默认为 <code>8069</code>;</li><li><strong><code>--longpolling-port</code></strong>: 用于长轮询连接的TCP端口, 默认为 <code>8072</code>;</li><li><strong><code>--proxy-mode</code></strong>: 通过 <code>werkzeug</code> 模块的支持, 可以使用 <code>x-forwarded-*</code> 请求头;</li></ul></li><li><code>Logging(日志)</code>: <ul><li><strong><code>--logfile</code></strong>: 将日志记录输出发送到指定的文件, 而不是 <code>stdout</code> 终端;</li><li><strong><code>--syslog</code></strong>: 日志到系统的事件记录器;</li><li><strong><code>--log-db</code></strong>: 记录到指定数据库的 <code>ir.logging</code> 模型, 数据库可以是当前启动的 <code>postgresql</code> 中的数据库名称, 也可以是一个 <code>PostgreSQL URI</code>;</li><li><strong><code>--log-handler</code></strong>: 日志级别, 在提供的级别上启用 <code>logger</code>, 例如: <code>odoo.models.DEBUG</code>, 将在模型中启用DEBUG级别或以上的所有日志记录消息; <code>odoo-bin --log-handler :DEBUG --log-handler werkzeug:CRITICAL --log-handler odoo.fields:WARNING</code></li><li><strong><code>--log-request</code></strong>: 为 <code>RPC</code> 请求启用 <code>DEBUG</code> 日志记录, 相当于: <code>--log-handler=odoo.http.RPC.request:DEBUG</code>;</li><li><strong><code>--log-response</code></strong>: 为 <code>RPC</code> 返回值启用 <code>DEBUG</code> 日志记录, 相当于: <code>--log-handler=odoo.http.rpc.response:DEBUG</code>;</li><li><strong><code>--log-web</code></strong>: 启用 <code>HTTP</code> 请求和响应的 <code>DEBUG</code> 日志记录, 相当于: <code>--log-handler=odoo.http:DEBUG</code>;</li><li><strong><code>--log-sql</code></strong>: 启用 <code>SQL</code> 查询的 <code>DEBUG</code> 日志记录, 相当于: <code>--log-handler=odoo.sql_db:DEBUG</code>;</li><li><strong><code>--log-level</code></strong>: 在特定记录器上设置预定义级别的快捷方式;</li><li><strong><code>debug_sql</code></strong>: 设置 <code>SQL</code> 查询的 <code>DEBUG</code> 日志, 相当于: <code>--log-sql</code>;</li><li><strong><code>debug_rpc</code></strong>: 设置 <code>RPC</code> 请求的 <code>DEBUG</code> 日志, 相当于: <code>--log-level debug --log-request</code>;</li><li><strong><code>debug_rpc_answer</code></strong>: 设置 <code>HTTP</code> 请求的 <code>DEBUG</code> 日志, 相当于: <code>--log-level debug --log-request --log-response</code>;</li></ul></li><li><code>Multiprocessing(多处理器)</code>: <ul><li><strong><code>--workers</code></strong>: 如果 count 不为 0, 则启用多处理器并设置指定数量的 http workers;</li><li><strong><code>--limit-request</code></strong>: 工作进程在回收和重新启动之前将处理的请求数;</li><li><strong><code>--limit-memory-soft</code></strong>: 每个工作进程允许的最大虚拟内存(字节), 如果超过了限制, 则在当前请求结束时终止并回收; 默认是 <code>2048M</code>;</li><li><strong><code>--limit-memory-hard</code></strong>: 虚拟内存的硬限制(字节), 任何超过限制的工作进程都会被杀死, 而无需等待当前请求处理结束; 默认是 <code>2560M</code></li><li><strong><code>--limit-time-cpu</code></strong>: 防止工作进程在每次请求中使用超过 limit (cpu) 的时间, 如果超过限制, worker 会挂掉;</li></ul></li></ul><p>example:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -c 指定配置文件地址</span>
<span class="token comment"># -d 指定数据库名</span>
<span class="token comment"># -u 指定启动服务之前需要升级的模块名</span>
<span class="token comment"># --modules 指定需要导出的模块</span>
<span class="token comment"># --i18n-export 指定导出文件的地址</span>
<span class="token comment"># 这行命令的作用就是将 library 模块升级, 并且导出 zh_CN 的翻译文件到 translation 目录</span>
python odoo-bin <span class="token parameter variable">-c</span> D:<span class="token punctuation">\\</span>workspace<span class="token punctuation">\\</span>odoo16<span class="token punctuation">\\</span>odoo.conf <span class="token parameter variable">-d</span> odoo_test <span class="token parameter variable">-u</span> library <span class="token parameter variable">--modules</span><span class="token operator">=</span>library --i18n-export<span class="token operator">=</span>./translation/zh_CN.po
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中, 命令行传入了很多参数, 然而在实际项目里面, 每一个参数都需要这么写那就比较麻烦了, 而且还容易出错, 因此, 我们可以使用配置文件的方式来将配置参数统一处理;</p><h3 id="配置文件介绍" tabindex="-1"><a class="header-anchor" href="#配置文件介绍" aria-hidden="true">#</a> 配置文件介绍</h3><p>大多数参数都可以使用配置文件的方式指定, 多数情况下, 它们使用类似的名称, 只是把 <code>--</code> 前缀删除, <code>-</code> 替换成 <code>_</code>, 例如: <code>db-template</code> 变成 <code>db_template</code>;</p><p>配置文件通常位于 <code>odoo16/</code> 目录下名为 <code>odoo.conf</code> 的文件(如果没有, 可以手动创建一个), 当然, 我们也可以在启动的时候指定配置文件的路径; 配置文件中包含若干个关于 odoo 的配置信息, 一个典型的配置文件内容如下:</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>[options]
addons_path = D:\\workspace\\odoo-16.0\\odoo\\addons,D:\\workspace\\odoo-16.0\\addons
admin_passwd = 123
csv_internal_sep = ,
db_host = localhost
db_name = odoo_16_test_20231127
db_user = root
db_password = root
db_maxconn = 64
db_port = False
db_sslmode = prefer
email_from = False
enable_redis = False
from_filter = False
geoip_database = C:\\usr\\share\\GeoIP\\GeoLite2-City.mmdb
http_enable = True
http_interface =
http_port = 8091
import_partial =
limit_memory_hard = 2684354560
limit_memory_soft = 2147483648
limit_request = 8192
limit_time_cpu = None
limit_time_real = None
limit_time_real_cron = -1
list_db = True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成之后就可以使用指定配置来启动服务了:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python odoo-bin <span class="token parameter variable">-c</span> /odoo.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上, 我们指定的 <code>http_port</code> 的端口为 <code>8091</code>, 运行启动命令之后, 在浏览器访问 <code>http://localhost:8091</code> 就可以看到以下界面;</p><p><img src="`+i+'" alt="login"></p><p>初始化的用户是 <code>admin</code>, 密码也是 <code>admin</code>;</p><h3 id="数据库管理" tabindex="-1"><a class="header-anchor" href="#数据库管理" aria-hidden="true">#</a> 数据库管理</h3><p>上面的配置文件中, 我们指定了 <code>db_name</code> 为 <code>odoo_16_test_20231127</code>, odoo 在启动的时候就会去链接这个数据库, 如果不存在, 则会新建一个;</p><p>我们还可以通过 web 端提供的数据库管理工具进行数据库管理;</p><p>服务启动后访问 <code>http://localhost:8091/web/database/manager</code>, 会出现下面的界面, 可以在这里对数据库进行管理操作, 包括创建, 备份和删除; 数据库管理是一个比较敏感的操作, 如果对外服务的话, 记得在配置文件中设置密码管理, 以防止数据丢失;</p><p><img src="'+r+`" alt="database-manager"></p><p>当然, 数据库的管理也可以在 <code>postgresql</code> 中进行, 但是需要注意的是, 创建的数据库的 owner 需要是 odoo 连接数据库的那个用户;</p><h3 id="开发工具" tabindex="-1"><a class="header-anchor" href="#开发工具" aria-hidden="true">#</a> 开发工具</h3><p>推荐使用 vscode, 或者是 pycharm, 这里就不多做介绍;</p><h3 id="vscode-断点调试" tabindex="-1"><a class="header-anchor" href="#vscode-断点调试" aria-hidden="true">#</a> vscode 断点调试</h3><p><code>vscode</code> 里面如果需要使用断点调试, 需要新建 <code>.vscode/launch.json</code>, 内容如下:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Odoo: debug&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;stopOnEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;D:/workspace/odoo-16.0/odoo-bin&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;python&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${command:python.interpreterPath}&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;D:/workspace/odoo-16.0/odoo.conf&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;--dev=all&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41);function f(q,w){const s=c("ExternalLinkIcon");return t(),l("div",null,[u,e("ol",null,[e("li",null,[o("安装 "),e("a",g,[o("python3"),n(s)])]),e("li",null,[o("安装 "),e("a",m,[o("Nodejs"),n(s)])]),e("li",null,[o("安装 "),e("a",v,[o("postgresql"),n(s)]),o(" 推荐使用 14.x 及以上版本")]),e("li",null,[o("安装 "),e("a",b,[o("pycharm"),n(s)])])]),h,e("blockquote",null,[e("p",null,[o("如果是 windows 系统, 还需要额外安装 c++ 编译工具 "),e("a",k,[o("visual studio生成工具"),n(s)])])]),_])}const P=d(p,[["render",f],["__file","环境搭建.html.vue"]]);export{P as default};
